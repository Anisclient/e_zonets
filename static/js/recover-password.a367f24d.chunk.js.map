{"version":3,"sources":["components/modal-window/modal-window.tsx","components/modal-window/style.module.css","containers/recover-password/steps/style.module.css","containers/recover-password/recover-password.tsx","__data__/actions/recover-password-confirm-stage.ts","__data__/actions/recover-password-final-stage.ts","__data__/actions/recover-password-input-stage.ts","containers/recover-password/steps/input-stage.tsx","containers/recover-password/steps/confirm-stage.tsx","containers/recover-password/steps/final-stage.tsx"],"names":["ModalWindowType","ModalWindow","modalText","buttonText","switchShowPopap","handler","type","t","useTranslation","className","style","modal","onClick","colorScheme","ButtonColors","blue","buttonOffset","forBasket","lightgreen","overlay","module","exports","RecoverPasswordStep","submitRecoverPasswordConfirmForm","setStep","a","code","baseAxios","method","url","data","response","message","submitRecoverPasswordFinalForm","setText","handleShowPopap","password","error","submitRecoverPasswordInputForm","createAction","types","INPUT","FORM_EMAIL_CHANGE","SET_ERROR","email","steps","INPUT_STEP","component","loginRef","useRef","values","submit","useEffect","current","focus","onSubmit","validate","errors","subscription","submitting","render","handleSubmit","form","formTitle","formText","name","LabeledInput","inputRef","label","id","placeholder","disabled","pristine","green","loading","to","URLs","login","cancelLink","next","CONFIRM_STEP","FINAL_STEP","useState","modalWindowActive","changeModalWindowActive","text","needRedirect","useSelector","selectors","finalStage","dispatch","useDispatch","repeatPassword","reset","setNeedRedirect","onlyInformationType","test","RecoverPassword","useReducer","state","action","currentStep","Stage"],"mappings":"mLAOYA,E,oDAAAA,O,6CAAAA,I,0BAAAA,M,KAaZ,IAuCeC,EAvCiC,SAAC,GAM1C,IALHC,EAKE,EALFA,UACAC,EAIE,EAJFA,WACAC,EAGE,EAHFA,gBACAC,EAEE,EAFFA,QACAC,EACE,EADFA,KAEQC,EAAMC,cAAND,EAMR,OACI,gCACI,sBAAKE,UAAWC,IAAMC,MAAtB,UACI,mBAAGF,UAAWC,IAAMR,UAApB,SAAgCA,IAChC,cAAC,IAAD,CACIU,QAVhB,WACIR,IACAC,KASYQ,YAAaC,IAAaC,KAC1BN,UAAWC,IAAMM,aAHrB,SAKKb,IAEJG,IAASN,EAAgBiB,WACtB,cAAC,IAAD,CACIJ,YAAaC,IAAaI,WAC1BT,UAAWC,IAAMM,aACjBJ,QAASR,EAHb,SAKKG,EAAE,mCAIf,qBAAKE,UAAWC,IAAMS,e,oBCrDlCC,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,oBCApGD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,UAAY,yBAAyB,aAAe,4BAA4B,SAAW,wBAAwB,WAAa,4B,kGCUjKC,E,iGCHCC,EAAgC,uCAAG,aAE5CC,EACAjB,GAH4C,uBAAAkB,EAAA,6DAC1CC,EAD0C,EAC1CA,KAD0C,kBAuCjBC,YAAU,CAC7BC,OAAQ,OACRC,IAAK,4BACLC,KAAM,CACFJ,UA3CgC,QA+ChC,QARFK,EAvCkC,cA+ChC,IAARA,GAAA,UAAAA,EAAUD,YAAV,eAAgBE,UAAWR,EAAQ,CAAElB,KAAM,SA/CH,yEAiDjC,CACHoB,KACoC,KAAhC,2CAAOK,gBAAP,mBAAiBD,YAAjB,eAAuBJ,OACvBnB,EAAE,gDApD8B,yDAAH,0D,uCCChC0B,EAA8B,uCAAG,aAE1CC,EACAC,EACA5B,GAJ0C,uBAAAkB,EAAA,6DACxCW,EADwC,EACxCA,SADwC,kBAqCfT,YAAU,CAC7BC,OAAQ,OACRC,IAAK,0BACLC,KAAM,CACFM,cAzC8B,QA6CtC,QARML,EArCgC,cA6CtC,IAAIA,GAAJ,UAAIA,EAAUD,YAAd,aAAI,EAAgBE,WAChBE,EAAQ3B,EAAE,0CACV4B,KA/CkC,yEAkD/B,CACHC,SAAQ,OAAC,EAAD,6BAAE,KAAOL,gBAAT,iBAAE,EAAiBD,YAAnB,aAAE,EAAuBO,QAnDC,yDAAH,4D,wCCQ9BC,GAR2BC,YACpCC,IAAuBC,MAAMC,mBAGIH,YACjCC,IAAuBC,MAAME,WAGU,uCAAG,aAAkBnB,EAASjB,GAA3B,uBAAAkB,EAAA,6DAASmB,EAAT,EAASA,MAAT,kBAmCfjB,YAAU,CAC7BC,OAAQ,OACRC,IAAK,oBACLC,KAAM,CAAEc,WAtC0B,QAwC9B,QALFb,EAnCgC,cAwC9B,IAARA,GAAA,UAAAA,EAAUD,YAAV,eAAgBE,UAAWR,EAAQ,CAAElB,KAAM,SAxCL,yEA0C/B,CACHsC,MACoC,KAAhC,2CAAOb,gBAAP,mBAAiBD,YAAjB,eAAuBJ,OACvBnB,EAAE,8CA7C4B,yDAAH,4D,SHN/Be,O,2BAAAA,I,+BAAAA,I,4BAAAA,M,KAMZ,IAAMuB,GAAK,mBACNvB,EAAoBwB,WAAa,CAC9BC,UIkBwC,SAAC,GAQ1C,IAPHvB,EAOE,EAPFA,QAQMwB,EAAWC,mBACT1C,EAAMC,cAAND,EAFN,4CAaF,WAEI2C,GAFJ,eAAAzB,EAAA,2DAKYmB,EAAUM,EAAVN,OALZ,yCAQeO,EAAO,CAAEP,SAASpB,EAASjB,IAR1C,4CAbE,sBA6CF,OApCA6C,qBAAU,WACNJ,EAASK,SAAWL,EAASK,QAAQC,UACtC,CAACN,EAASK,UAmCT,cAAC,IAAD,CACIE,SA/CN,4CAgDMC,SAjBR,SAAsBN,GAIlB,IAAMO,EAAiB,GAOvB,OALKP,EAAON,QACRa,EAAOb,MAAQrC,EACX,uDAGDkD,GAOHC,aAAc,CAAEC,YAAY,GAC5BC,OAAQ,gBAAGC,EAAH,EAAGA,aAAH,OACJ,uBAAMpD,UAAWC,IAAMoD,KAAMP,SAAUM,EAAvC,UACI,oBAAIpD,UAAWC,IAAMqD,UAArB,SACKxD,EAAE,yCAEP,mBAAGE,UAAWC,IAAMsD,SAApB,SACKzD,EAAE,8CAEP,cAAC,IAAD,CACImD,aAAc,CACVC,YAAY,GAEhBC,OAAQ,gBAAGD,EAAH,EAAGA,WAAH,OACJ,cAAC,IAAD,CACIM,KAAK,QACLlB,UAAWmB,IACXC,SAAUnB,EACVoB,MAAO7D,EACH,2CAEJ8D,GAAG,cACHC,YAAa/D,EACT,4CAEJgE,SAAUZ,OAYtB,cAAC,IAAD,CACID,aAAc,CACVc,UAAU,EACVf,QAAQ,EACRE,YAAY,GAEhBC,OAAQ,YAAuC,IAApCY,EAAmC,EAAnCA,SAAUf,EAAyB,EAAzBA,OAAQE,EAAiB,EAAjBA,WACzB,OACI,cAAC,IAAD,CACI9C,YAAaC,IAAa2D,MAC1BhE,UAAWC,IAAMM,aACjBV,KAAK,SACLiE,SACIC,IAAQ,OAAIf,QAAJ,IAAIA,OAAJ,EAAIA,EAAQb,QAASe,EAEjCe,QAASf,EAPb,SASKpD,EACG,+CAOpB,cAAC,IAAD,CAAMoE,GAAIC,IAAKC,MAAMhD,IAAKpB,UAAWC,IAAMoE,WAA3C,SACKvE,EAAE,iDJzInBwE,KAAMzD,EAAoB0D,eAHvB,cAKN1D,EAAoB0D,aAAe,CAChCjC,UKa0C,SAAC,GAQ5C,IAPHvB,EAOE,EAPFA,QAQMwB,EAAWC,mBACT1C,EAAMC,cAAND,EAFN,4CAcF,WAEI2C,GAFJ,eAAAzB,EAAA,2DAKYC,EAASwB,EAATxB,MALZ,yCAQeyB,EAAO,CAAEzB,QAAQF,EAASjB,IARzC,4CAdE,sBA8CF,OApCA6C,qBAAU,WACNJ,EAASK,SAAWL,EAASK,QAAQC,UACtC,CAACN,EAASK,UAmCT,cAAC,IAAD,CACIE,SAhDN,4CAiDMG,aAAc,CAAEC,YAAY,GAC5BH,SAlBR,SAAsBN,GAIlB,IAAMO,EAAiB,GAOvB,OALKP,EAAOxB,OACR+B,EAAO/B,KAAOnB,EACV,yDAGDkD,GAQHG,OAAQ,gBAAGC,EAAH,EAAGA,aAAH,OACJ,uBAAMpD,UAAWC,IAAMoD,KAAMP,SAAUM,EAAvC,UACI,oBAAIpD,UAAWC,IAAMqD,UAArB,SACKxD,EAAE,kDAEP,mBAAGE,UAAWC,IAAMsD,SAApB,SACKzD,EAAE,gDAEP,cAAC,IAAD,CACImD,aAAc,CACVC,YAAY,GAEhBC,OAAQ,gBAAGD,EAAH,EAAGA,WAAH,OACJ,cAAC,IAAD,CACIM,KAAK,OACLlB,UAAWmB,IACXC,SAAUnB,EACVoB,MAAO7D,EACH,wCAEJ8D,GAAG,aACHC,YAAa/D,EACT,6CAEJD,KAAK,SACLiE,SAAUZ,OAItB,cAAC,IAAD,CACID,aAAc,CACVc,UAAU,EACVb,YAAY,EACZF,QAAQ,GAEZG,OAAQ,gBAAGY,EAAH,EAAGA,SAAUb,EAAb,EAAaA,WAAYF,EAAzB,EAAyBA,OAAzB,OACJ,cAAC,IAAD,CACI5C,YAAaC,IAAa2D,MAC1BhE,UAAWC,IAAMM,aACjBV,KAAK,SACLiE,SACIC,IAAQ,OAAIf,QAAJ,IAAIA,OAAJ,EAAIA,EAAQ/B,OAAQiC,EAEhCe,QAASf,EAPb,SASKpD,EAAE,iDAIf,cAAC,IAAD,CAAMoE,GAAIC,IAAKC,MAAMhD,IAAKpB,UAAWC,IAAMoE,WAA3C,SACKvE,EAAE,mDLzHnBwE,KAAMzD,EAAoB2D,aAPvB,cASN3D,EAAoB2D,WAAa,CAC9BlC,UMiB4B,WAChC,IAAMC,EAAWC,mBACT1C,EAAMC,cAAND,EAF8B,EAGe2E,oBAAS,GAHxB,mBAG/BC,EAH+B,KAGZC,EAHY,OAIdF,mBAAS,IAJK,mBAI/BG,EAJ+B,KAIzBnD,EAJyB,KAYhCoD,EAAeC,YACjBC,IAA0BC,WAAWH,cAGnCI,EAAWC,cAhBqB,4CAsBtC,WAEIzC,GAFJ,iBAAAzB,EAAA,yDAKYW,EAA6Bc,EAA7Bd,SAAUwD,EAAmB1C,EAAnB0C,gBAEdxD,GAAYA,IAAawD,EAPjC,yCAQezC,EAAO,CAAEf,YAAYF,EAASC,EAAiB5B,IAR9D,4CAtBsC,sBA0DtC,GAxCA6C,qBAAU,WACNJ,EAASK,SAAWL,EAASK,QAAQC,UACtC,CAACN,EAASK,UAgCbD,qBAAU,WACN,OAAO,WACHsC,EAASG,kBAEd,IAECP,EACA,OAAO,cAAC,IAAD,CAAUX,GAAIC,IAAKC,MAAMhD,MAGpC,SAASM,IACLiD,GAAyBD,GA4C7B,OACI,qCACKA,GACG,cAAC,IAAD,CACIhF,WAAW,KACXD,UAAWmF,EACXjF,gBAAiB+B,EACjB9B,QAhDhB,WACI8B,IACAuD,EAASI,gBA+CGxF,KAAMN,IAAgB+F,sBAG9B,cAAC,IAAD,CACIxC,SAvH0B,4CAwH1BC,SAjDZ,SAAsBN,GAKlB,IAAMO,EAAiB,GA4BvB,OA1BKP,EAAOd,WACRqB,EAAOrB,SAAW7B,EACd,0DAIH2C,EAAO0C,eAID1C,EAAOd,WAAac,EAAO0C,iBAClCnC,EAAOmC,eAAiBrF,EACpB,2DALJkD,EAAOmC,eAAiBrF,EACpB,+DAOJ2C,EAAOd,WAAa,YAAY4D,KAAK9C,EAAOd,YAC5CqB,EAAOrB,SAAP,UAAqB7B,EACjB,mDADJ,iBAIA2C,EAAOd,UAAY,WAAW4D,KAAK9C,EAAOd,YAC1CqB,EAAOrB,SAAW7B,EACd,wDAIDkD,GAiBCC,aAAc,CAAEC,YAAY,GAC5BC,OAAQ,gBAAGC,EAAH,EAAGA,aAAH,OACJ,uBAAMpD,UAAWC,IAAMoD,KAAMP,SAAUM,EAAvC,UACI,oBAAIpD,UAAWC,IAAMqD,UAArB,SACKxD,EAAE,yCAEP,mBAAGE,UAAWC,IAAMsD,SAApB,SACKzD,EAAE,8CAEP,cAAC,IAAD,CACImD,aAAc,CACVC,YAAY,GAEhBC,OAAQ,gBAAGD,EAAH,EAAGA,WAAH,OACJ,cAAC,IAAD,CACIZ,UAAWmB,IACXD,KAAK,WACLE,SAAUnB,EACVoB,MAAO7D,EACH,6CAEJ8D,GAAG,WACHC,YAAa/D,EACT,kDAEJD,KAAK,WACLiE,SAAUZ,OAItB,cAAC,IAAD,CACID,aAAc,CACVC,YAAY,GAEhBC,OAAQ,gBAAGD,EAAH,EAAGA,WAAH,OACJ,cAAC,IAAD,CACIZ,UAAWmB,IACXD,KAAK,iBACLG,MAAO7D,EACH,mDAEJ8D,GAAG,kBACHC,YAAa/D,EACT,kDAEJD,KAAK,WACLiE,SAAUZ,OAItB,cAAC,IAAD,CACID,aAAc,CACVc,UAAU,EACVf,QAAQ,EACRE,YAAY,GAEhBC,OAAQ,gBAAGY,EAAH,EAAGA,SAAUf,EAAb,EAAaA,OAAQE,EAArB,EAAqBA,WAArB,OACJ,cAAC,IAAD,CACI9C,YAAaC,IAAa2D,MAC1BhE,UAAWC,IAAMM,aACjBV,KAAK,SACLiE,SACIC,IAAQ,OACRf,QADQ,IACRA,OADQ,EACRA,EAAQrB,YADR,OAEAqB,QAFA,IAEAA,OAFA,EAEAA,EAAQmC,iBACRjC,EAEJe,QAASf,EAVb,SAYKpD,EACG,+CAMhB,cAAC,IAAD,CAAMoE,GAAIC,IAAKC,MAAMhD,IAAKpB,UAAWC,IAAMoE,WAA3C,SACKvE,EAAE,sDNjOpB,GAgCI0F,UAlBf,WAA0C,IAAD,EACLC,sBAAW,SAACC,EAAOC,GAC/C,OAAQA,EAAO9F,MACX,IAAK,OACD,OAAIuC,EAAMsD,GAAOpB,KACNlC,EAAMsD,GAAOpB,KAEjBoB,EACX,QACI,OAAOA,KAEhB7E,EAAoBwB,YAXc,mBAC9BuD,EAD8B,KACjBX,EADiB,KAa/BY,EAA8BzD,EAAMwD,GAAatD,UAEvD,OAAO,cAACuD,EAAD,CAAO9E,QAASkE","file":"static/js/recover-password.a367f24d.chunk.js","sourcesContent":["import React from 'react';\nimport style from './style.module.css';\nimport Button, { ButtonColors } from '../button';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\nexport enum ModalWindowType {\n    onlyInformationType,\n    forBasket,\n}\n\ninterface ModalWindowProps {\n    modalText: string;\n    buttonText: string;\n    switchShowPopap: () => void;\n    handler: () => void;\n    type: ModalWindowType;\n}\n\nconst ModalWindow: React.FC<ModalWindowProps> = ({\n    modalText,\n    buttonText,\n    switchShowPopap,\n    handler,\n    type,\n}) => {\n    const { t } = useTranslation();\n    function commitHandler() {\n        switchShowPopap();\n        handler();\n    }\n\n    return (\n        <div>\n            <div className={style.modal}>\n                <p className={style.modalText}>{modalText}</p>\n                <Button\n                    onClick={commitHandler}\n                    colorScheme={ButtonColors.blue}\n                    className={style.buttonOffset}\n                >\n                    {buttonText}\n                </Button>\n                {type === ModalWindowType.forBasket && (\n                    <Button\n                        colorScheme={ButtonColors.lightgreen}\n                        className={style.buttonOffset}\n                        onClick={switchShowPopap}\n                    >\n                        {t('i18next.modalwindow.cancel')}\n                    </Button>\n                )}\n            </div>\n            <div className={style.overlay}></div>\n        </div>\n    );\n};\n\nexport default ModalWindow;\n\nModalWindow.propTypes = {\n    modalText: PropTypes.string.isRequired,\n    buttonText: PropTypes.string.isRequired,\n    switchShowPopap: PropTypes.func.isRequired,\n    handler: PropTypes.func.isRequired,\n    type: PropTypes.oneOf([\n        ModalWindowType.onlyInformationType,\n        ModalWindowType.forBasket,\n    ]).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"style_modal__K5xBK\",\"buttonOffset\":\"style_buttonOffset__1106E\",\"overlay\":\"style_overlay__3brN4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"style_form__3TMWT\",\"formTitle\":\"style_formTitle__150nd\",\"buttonOffset\":\"style_buttonOffset__134Pb\",\"formText\":\"style_formText__23ts5\",\"cancelLink\":\"style_cancelLink__3NqKS\"};","import React, { ReactElement, useReducer } from 'react';\nimport { ConfirmStage } from './steps/confirm-stage';\nimport { FinalStage } from './steps/final-stage';\nimport { InputStage } from './steps/input-stage';\n\n/* eslint-disable no-unused-vars */\n\nexport interface StageProps {\n    setStep: (action: { type: 'next' }) => void;\n}\n\nexport enum RecoverPasswordStep {\n    INPUT_STEP,\n    CONFIRM_STEP,\n    FINAL_STEP,\n}\n\nconst steps = {\n    [RecoverPasswordStep.INPUT_STEP]: {\n        component: InputStage,\n        next: RecoverPasswordStep.CONFIRM_STEP,\n    },\n    [RecoverPasswordStep.CONFIRM_STEP]: {\n        component: ConfirmStage,\n        next: RecoverPasswordStep.FINAL_STEP,\n    },\n    [RecoverPasswordStep.FINAL_STEP]: {\n        component: FinalStage,\n    },\n};\n\nfunction RecoverPassword(): ReactElement {\n    const [currentStep, dispatch] = useReducer((state, action) => {\n        switch (action.type) {\n            case 'next':\n                if (steps[state].next) {\n                    return steps[state].next;\n                }\n                return state;\n            default:\n                return state;\n        }\n    }, RecoverPasswordStep.INPUT_STEP);\n\n    const Stage: React.FC<StageProps> = steps[currentStep].component;\n\n    return <Stage setStep={dispatch} />;\n}\n\nexport default RecoverPassword;\n","// import { getConfigValue } from '@ijl/cli';\nimport { baseAxios } from '../../utils';\n// import {\n//     setError,\n//     setLoading,\n//     setSuccess,\n// } from '../store/reducers/recover-password/confirm-stage';\n\nexport const submitRecoverPasswordConfirmForm = async (\n    { code },\n    setStep,\n    t\n) => {\n    // dispatch(setLoading());\n    // const baseApiUrl = getConfigValue('e_zone.api');\n    // const response = await fetch(baseApiUrl + '/recover/password/confirm', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json;charset=utf-8',\n    //     },\n    //     body: JSON.stringify({ code }),\n    // });\n\n    // if (response.ok) {\n    //     try {\n    //         await response.json();\n    //         // dispatch(setSuccess());\n    //         setStep({ type: 'next' });\n    //     } catch (error) {\n    //         console.error(error.message);\n    //         // dispatch(setError(error.message));\n    //         return { code: error.message };\n    //     }\n    // } else {\n    //     try {\n    //         const result = await response.json();\n    //         // dispatch(setError(result.error));\n    //         return {\n    //             code:\n    //                 result.code === 2 &&\n    //                 t('i18next.recoverpassword.confirm.errorcode2'),\n    //         };\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n    try {\n        const response = await baseAxios({\n            method: 'POST',\n            url: '/recover/password/confirm',\n            data: {\n                code,\n            },\n        });\n\n        response?.data?.message && setStep({ type: 'next' });\n    } catch (error) {\n        return {\n            code:\n                error?.response?.data?.code === 2 &&\n                t('i18next.recoverpassword.confirm.errorcode2'),\n        };\n    }\n};\n","// import { getConfigValue } from '@ijl/cli';\nimport { baseAxios } from '../../utils';\n// import {\n//  setError,\n// setNeedRedirect,\n// setLoading,\n// } from\n// '../store/slices/recover-password/final-stage';\n\nexport const submitRecoverPasswordFinalForm = async (\n    { password },\n    setText,\n    handleShowPopap,\n    t\n) => {\n    // dispatch(setLoading());\n    // const baseApiUrl = getConfigValue('e_zone.api');\n    // const response = await fetch(baseApiUrl + '/recover/password/final', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json;charset=utf-8',\n    //     },\n    //     body: JSON.stringify({ password }),\n    // });\n\n    // if (response.ok) {\n    //     try {\n    //         const result = await response.json();\n    //         // dispatch(setNeedRedirect());\n    //         setText(t('i18next.recoverpassword.final.success'));\n    //         handleShowPopap();\n    //     } catch (error) {\n    //         console.error(error.message);\n    //         // dispatch(setError(error.message));\n    //         return { password: error.message };\n    //     }\n    // } else {\n    //     try {\n    //         const result = await response.json();\n    //         // dispatch(setError(result.error));\n    //         return { password: result.error };\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n    try {\n        const response = await baseAxios({\n            method: 'POST',\n            url: '/recover/password/final',\n            data: {\n                password,\n            },\n        });\n\n        if (response?.data?.message) {\n            setText(t('i18next.recoverpassword.final.success'));\n            handleShowPopap();\n        }\n    } catch (error) {\n        return {\n            password: error?.response?.data?.error,\n        };\n    }\n};\n","import * as types from '../action-types';\n// import { getConfigValue } from '@ijl/cli';\nimport { createAction } from '@reduxjs/toolkit';\nimport { baseAxios } from '../../utils';\n\n// const submitActionCreator = createAction(types.RECOVER_PASSWORD.INPUT.SUBMIT);\n\n// const successActionCreator = createAction(types.RECOVER_PASSWORD.INPUT.SUCCESS);\n\nexport const emailChangeActionCreator = createAction<string>(\n    types.RECOVER_PASSWORD.INPUT.FORM_EMAIL_CHANGE\n);\n\nexport const setErrorActionCreator = createAction<string | boolean>(\n    types.RECOVER_PASSWORD.INPUT.SET_ERROR\n);\n\nexport const submitRecoverPasswordInputForm = async ({ email }, setStep, t) => {\n    // dispatch(submitActionCreator());\n    // const baseApiUrl = getConfigValue('e_zone.api');\n    // const response = await fetch(baseApiUrl + '/recover/password', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json;charset=utf-8',\n    //     },\n    //     body: JSON.stringify({ email }),\n    // });\n\n    // if (response.ok) {\n    //     try {\n    //         await response.json();\n    //         // dispatch(successActionCreator());\n    //         setStep({ type: 'next' });\n    //     } catch (error) {\n    //         console.error(error.message);\n    //         // dispatch(setErrorActionCreator(error.message));\n    //         return { email: error.message };\n    //     }\n    // } else {\n    //     try {\n    //         const result = await response.json();\n    //         // dispatch(setErrorActionCreator(result.error));\n    //         return {\n    //             email:\n    //                 result.code === 1 &&\n    //                 t('i18next.recoverpassword.input.errorcode1'),\n    //         };\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n    try {\n        const response = await baseAxios({\n            method: 'POST',\n            url: '/recover/password',\n            data: { email },\n        });\n        response?.data?.message && setStep({ type: 'next' });\n    } catch (error) {\n        return {\n            email:\n                error?.response?.data?.code === 1 &&\n                t('i18next.recoverpassword.input.errorcode1'),\n        };\n    }\n};\n","import { LabeledInput, Button, ButtonColors } from '../../../components';\nimport React, { useEffect, useRef } from 'react';\nimport style from './style.module.css';\nimport { StageProps } from '../recover-password';\nimport { Link } from 'react-router-dom';\nimport { URLs } from '../../../__data__/urls';\nimport PropTypes from 'prop-types';\nimport {\n    submitRecoverPasswordInputForm as submit,\n    // emailChangeActionCreator as setEmail,\n    // setErrorActionCreator as setError,\n} from '../../../__data__/actions/recover-password-input-stage';\n// import { useDispatch } from 'react-redux';\n// import * as selectors from '../../../__data__/selectors';\nimport { Form, Field, FormSpy } from 'react-final-form';\nimport { useTranslation } from 'react-i18next';\n\n/* eslint-disable no-unused-vars */\n\n// interface MapStateToProps {\n//     email: string;\n//     loading: boolean;\n//     error: string | boolean;\n// }\n\ninterface Values {\n    email: string;\n}\n\n// interface MapDispatchToProps {\n//     submit: (data: Data, StageProps) => void;\n//     setEmail: (email: string) => void;\n//     setError: (error: string | boolean) => void;\n// }\n\n// type InputStageProps = MapStateToProps & MapDispatchToProps & StageProps;\n\nexport const InputStage: React.FC<StageProps> = ({\n    setStep,\n    // email,\n    // loading,\n    // error,\n    // submit,\n    // setEmail,\n    // setError,\n}) => {\n    const loginRef = useRef<HTMLInputElement>();\n    const { t } = useTranslation();\n\n    // const email = useSelector(selectors.recoverPassword.inputStage.email);\n    // const loading = useSelector(selectors.recoverPassword.inputStage.loading);\n    // const error = useSelector(selectors.recoverPassword.inputStage.error);\n    // const dispatch = useDispatch();\n\n    useEffect(() => {\n        loginRef.current && loginRef.current.focus();\n    }, [loginRef.current]);\n\n    async function handleSubmit(\n        // event: React.FormEvent<HTMLFormElement>\n        values: Values\n    ) {\n        // event.preventDefault();\n        const { email } = values;\n\n        if (email) {\n            return submit({ email }, setStep, t);\n        } else {\n            // dispatch(setError('Необходимо указать email'));\n        }\n    }\n\n    // function handleChange(event) {\n    //     dispatch(setEmail(event.target.value));\n    // }\n\n    function validateForm(values) {\n        interface Errors {\n            email?: string;\n        }\n        const errors: Errors = {};\n\n        if (!values.email) {\n            errors.email = t(\n                'i18next.recoverpassword.input.erroremailisrequired'\n            );\n        }\n        return errors;\n    }\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            validate={validateForm}\n            subscription={{ submitting: true }}\n            render={({ handleSubmit }) => (\n                <form className={style.form} onSubmit={handleSubmit}>\n                    <h3 className={style.formTitle}>\n                        {t('i18next.recoverpassword.input.title')}\n                    </h3>\n                    <p className={style.formText}>\n                        {t('i18next.recoverpassword.input.informtext')}\n                    </p>\n                    <FormSpy\n                        subscription={{\n                            submitting: true,\n                        }}\n                        render={({ submitting }) => (\n                            <Field\n                                name=\"email\"\n                                component={LabeledInput}\n                                inputRef={loginRef}\n                                label={t(\n                                    'i18next.recoverpassword.input.youremail'\n                                )}\n                                id=\"email-input\"\n                                placeholder={t(\n                                    'i18next.recoverpassword.input.enteremail'\n                                )}\n                                disabled={submitting}\n                            />\n                        )}\n                    />\n                    {/* <Field\n                        name=\"email\"\n                        component={LabeledInput}\n                        inputRef={loginRef}\n                        label=\"Ваш email:\"\n                        id=\"email-input\"\n                        placeholder=\"Введите email\"\n                    /> */}\n                    <FormSpy\n                        subscription={{\n                            pristine: true,\n                            errors: true,\n                            submitting: true,\n                        }}\n                        render={({ pristine, errors, submitting }) => {\n                            return (\n                                <Button\n                                    colorScheme={ButtonColors.green}\n                                    className={style.buttonOffset}\n                                    type=\"submit\"\n                                    disabled={\n                                        pristine || errors?.email || submitting\n                                    }\n                                    loading={submitting}\n                                >\n                                    {t(\n                                        'i18next.recoverpassword.input.continue'\n                                    )}\n                                </Button>\n                            );\n                        }}\n                    />\n\n                    <Link to={URLs.login.url} className={style.cancelLink}>\n                        {t('i18next.recoverpassword.input.cancel')}\n                    </Link>\n                </form>\n            )}\n        />\n\n        //     <form className={style.form} onSubmit={handleSubmit}>\n        //     <h3 className={style.formTitle}>Восстановление пароля</h3>\n        //     <p className={style.formText}>\n        //         На введенный email придет код подтверждения\n        //     </p>\n        //     <Field name=\"email\" component={LabeledInput} inputRef={loginRef}\n        //         label=\"Ваш email:\"\n        //         id=\"email-input\" />\n        //     <LabeledInput\n        //         inputRef={loginRef}\n        //         label=\"Ваш email:\"\n        //         id=\"email-input\"\n        //         name=\"email\"\n        //         placeholder=\"Введите email\"\n        //         value={email}\n        //         onChange={handleChange}\n        //         error={error}\n        //         disabled={loading}\n        //     />\n        //     <Button\n        //         colorScheme={ButtonColors.green}\n        //         className={style.buttonOffset}\n        //         type=\"submit\"\n        //         disabled={loading}\n        //         loading={loading}\n        //     >\n        //         Продолжить\n        //     </Button>\n        //     <Link to={URLs.login.url} className={style.cancelLink}>\n        //         Отменить\n        //     </Link>\n        // </form>\n    );\n};\n\n// const mapStateToProps = ({\n//     recoverPassword: { inputStage },\n// }): MapStateToProps => ({\n//     email: inputStage.email,\n//     loading: inputStage.loading,\n//     error: inputStage.error,\n// });\n\n// const mapDispatchToProps = {\n//     submit: submitRecoverPasswordInputForm,\n//     setEmail: emailChangeActionCreator,\n//     setError: setErrorActionCreator,\n// };\n\nInputStage.propTypes = {\n    setStep: PropTypes.func.isRequired,\n    // email: PropTypes.string.isRequired,\n    // loading: PropTypes.bool.isRequired,\n    // error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n    // submit: PropTypes.func.isRequired,\n    // setEmail: PropTypes.func.isRequired,\n    // setError: PropTypes.func.isRequired,\n};\n\n// export default connect(mapStateToProps, mapDispatchToProps)(InputStage);\n","import { LabeledInput, Button, ButtonColors } from '../../../components';\nimport React, { useEffect, useRef } from 'react';\nimport style from './style.module.css';\nimport { Link } from 'react-router-dom';\nimport { URLs } from '../../../__data__/urls';\nimport { StageProps } from '../recover-password';\nimport PropTypes from 'prop-types';\nimport { submitRecoverPasswordConfirmForm as submit } from '../../../__data__/actions/recover-password-confirm-stage';\n// import {\n// setCode,\n// setError,\n// } from '../../../__data__/store/reducers/recover-password/confirm-stage';\n// import { useDispatch } from 'react-redux';\n// import * as selectors from '../../../__data__/selectors';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\n// interface MapStateToProps {\n//     code: string;\n//     error: string | boolean;\n//     loading: boolean;\n// }\n\ninterface Values {\n    code: number;\n}\n\n// interface MapDispatchToProps {\n//     submit: (data: Data, StageProps) => void;\n//     setCode: (code: string) => void;\n//     setError: (error: string | boolean) => void;\n// }\n\n// type ConfirmStageProps = StageProps & MapStateToProps & MapDispatchToProps;\n\nexport const ConfirmStage: React.FC<StageProps> = ({\n    setStep,\n    // code,\n    // error,\n    // loading,\n    // submit,\n    // setCode,\n    // setError,\n}) => {\n    const loginRef = useRef<HTMLInputElement>();\n    const { t } = useTranslation();\n\n    // const code = useSelector(selectors.recoverPassword.confirmStage.code);\n    // const error = useSelector(selectors.recoverPassword.confirmStage.error);\n    // const loading = useSelector(selectors.recoverPassword.confirmStage.loading);\n\n    // const dispatch = useDispatch();\n\n    useEffect(() => {\n        loginRef.current && loginRef.current.focus();\n    }, [loginRef.current]);\n\n    async function handleSubmit(\n        // event: React.FormEvent<HTMLFormElement>\n        values: Values\n    ) {\n        // event.preventDefault();\n        const { code } = values;\n\n        if (code) {\n            return submit({ code }, setStep, t);\n        } else {\n            // dispatch(setError('Укажите проверочный код'));\n        }\n    }\n\n    // function handleChange(event) {\n    //     dispatch(setCode(event.target.value));\n    // }\n\n    function validateForm(values) {\n        interface Errors {\n            code?: string;\n        }\n        const errors: Errors = {};\n\n        if (!values.code) {\n            errors.code = t(\n                'i18next.recoverpassword.confirm.errorecodeisrequired'\n            );\n        }\n        return errors;\n    }\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            subscription={{ submitting: true }}\n            validate={validateForm}\n            render={({ handleSubmit }) => (\n                <form className={style.form} onSubmit={handleSubmit}>\n                    <h3 className={style.formTitle}>\n                        {t('i18next.recoverpassword.confirm.confirmation')}\n                    </h3>\n                    <p className={style.formText}>\n                        {t('i18next.recoverpassword.confirm.informtext')}\n                    </p>\n                    <FormSpy\n                        subscription={{\n                            submitting: true,\n                        }}\n                        render={({ submitting }) => (\n                            <Field\n                                name=\"code\"\n                                component={LabeledInput}\n                                inputRef={loginRef}\n                                label={t(\n                                    'i18next.recoverpassword.confirm.code'\n                                )}\n                                id=\"code-input\"\n                                placeholder={t(\n                                    'i18next.recoverpassword.confirm.entercode'\n                                )}\n                                type=\"number\"\n                                disabled={submitting}\n                            />\n                        )}\n                    />\n                    <FormSpy\n                        subscription={{\n                            pristine: true,\n                            submitting: true,\n                            errors: true,\n                        }}\n                        render={({ pristine, submitting, errors }) => (\n                            <Button\n                                colorScheme={ButtonColors.green}\n                                className={style.buttonOffset}\n                                type=\"submit\"\n                                disabled={\n                                    pristine || errors?.code || submitting\n                                }\n                                loading={submitting}\n                            >\n                                {t('i18next.recoverpassword.confirm.continue')}\n                            </Button>\n                        )}\n                    />\n                    <Link to={URLs.login.url} className={style.cancelLink}>\n                        {t('i18next.recoverpassword.confirm.cancel')}\n                    </Link>\n                </form>\n            )}\n        />\n        // <form className={style.form} onSubmit={handleSubmit}>\n        //     <h3 className={style.formTitle}>Подтверждение</h3>\n        //     <p className={style.formText}>\n        //         После ввода кода Вам нужно будет сменить пароль (правильный код\n        //         - 123)\n        //     </p>\n        //     <LabeledInput\n        //         inputRef={loginRef}\n        //         label=\"Код:\"\n        //         id=\"code-input\"\n        //         name=\"code\"\n        //         placeholder=\"Введите код\"\n        //         value={code}\n        //         onChange={handleChange}\n        //         error={error}\n        //         type=\"number\"\n        //         disabled={loading}\n        //     />\n        //     <Button\n        //         colorScheme={ButtonColors.green}\n        //         className={style.buttonOffset}\n        //         type=\"submit\"\n        //         disabled={loading}\n        //         loading={loading}\n        //     >\n        //         Продолжить\n        //     </Button>\n        //     <Link to={URLs.login.url} className={style.cancelLink}>\n        //         Отменить\n        //     </Link>\n        // </form>\n    );\n};\n\n// const mapStateToProps = ({\n//     recoverPassword: { confirmStage },\n// }): MapStateToProps => ({\n//     code: confirmStage.code,\n//     error: confirmStage.error,\n//     loading: confirmStage.loading,\n// });\n\n// const mapDispatchToProps = {\n//     submit: submitRecoverPasswordConfirmForm,\n//     setCode: setCode,\n//     setError: setError,\n// };\n\nConfirmStage.propTypes = {\n    setStep: PropTypes.func.isRequired,\n    // code: PropTypes.string.isRequired,\n    // loading: PropTypes.bool.isRequired,\n    // error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n    // submit: PropTypes.func.isRequired,\n    // setCode: PropTypes.func.isRequired,\n    // setError: PropTypes.func.isRequired,\n};\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ConfirmStage);\n","import { LabeledInput, Button, ButtonColors } from '../../../components';\nimport React, { useEffect, useRef, useState } from 'react';\nimport style from './style.module.css';\nimport { Link, Redirect } from 'react-router-dom';\nimport { URLs } from '../../../__data__/urls';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { submitRecoverPasswordFinalForm as submit } from '../../../__data__/actions/recover-password-final-stage';\nimport {\n    // setError,\n    // setPassword,\n    // setRepeatPassword,\n    setNeedRedirect,\n    reset,\n} from '../../../__data__/store/slices/recover-password/final-stage';\n// import PropTypes from 'prop-types';\nimport * as selectors from '../../../__data__/selectors';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport ModalWindow, { ModalWindowType } from '../../../components/modal-window';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\n// interface MapStateToProps {\n//     password: string;\n//     repeatPassword: string;\n//     error: string | boolean;\n//     needRedirect: boolean;\n//     loading: boolean;\n// }\n\ninterface Values {\n    password: string;\n    repeatPassword: string;\n}\n\n// interface MapDispatchToProps {\n//     submit: (data: Data) => void;\n//     setPassword: (password: string) => void;\n//     setRepeatPassword: (repeatPassword: string) => void;\n//     setError: (error: string | boolean) => void;\n//     reset: () => void;\n// }\n\n// type FinalStageProps = MapStateToProps & MapDispatchToProps;\n\nexport const FinalStage: React.FC = () => {\n    const loginRef = useRef<HTMLInputElement>();\n    const { t } = useTranslation();\n    const [modalWindowActive, changeModalWindowActive] = useState(false);\n    const [text, setText] = useState('');\n\n    // const password = useSelector(selectors.recoverPassword.finalStage.password);\n    // const repeatPassword = useSelector(\n    //     selectors.recoverPassword.finalStage.repeatPassword\n    // );\n    // const error = useSelector(selectors.recoverPassword.finalStage.error);\n    // const loading = useSelector(selectors.recoverPassword.finalStage.loading);\n    const needRedirect = useSelector(\n        selectors.recoverPassword.finalStage.needRedirect\n    );\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        loginRef.current && loginRef.current.focus();\n    }, [loginRef.current]);\n\n    async function handleSubmit(\n        // event: React.FormEvent<HTMLFormElement>\n        values: Values\n    ) {\n        // event.preventDefault();\n        const { password, repeatPassword } = values;\n\n        if (password && password === repeatPassword) {\n            return submit({ password }, setText, handleShowPopap, t);\n        }\n        // else {\n        // dispatch(setError('Укажите новый пароль два раза'));\n        // if (repeatPassword && password && password !== repeatPassword) {\n        // return {\n        //     password: 'Пароли не совпадают',\n        //     repeatPassword: 'Пароли не совпадают',\n        // };\n        // dispatch(setError('Пароли не совпадают'));\n        // }\n        // }\n    }\n\n    // function handlePasswordChange(event) {\n    //     dispatch(setPassword(event.target.value));\n    // }\n\n    // function handleRepeatPasswordChange(event) {\n    //     dispatch(setRepeatPassword(event.target.value));\n    // }\n\n    useEffect(() => {\n        return function () {\n            dispatch(reset());\n        };\n    }, []);\n\n    if (needRedirect) {\n        return <Redirect to={URLs.login.url} />;\n    }\n\n    function handleShowPopap() {\n        changeModalWindowActive(!modalWindowActive);\n    }\n\n    function finishRecoverPassword() {\n        handleShowPopap();\n        dispatch(setNeedRedirect());\n    }\n\n    function validateForm(values) {\n        interface Errors {\n            password?: string;\n            repeatPassword?: string;\n        }\n        const errors: Errors = {};\n\n        if (!values.password) {\n            errors.password = t(\n                'i18next.recoverpassword.final.errorpasswordisrequired'\n            );\n        }\n\n        if (!values.repeatPassword) {\n            errors.repeatPassword = t(\n                'i18next.recoverpassword.final.errorrepeatpasswordisrequired'\n            );\n        } else if (values.password !== values.repeatPassword) {\n            errors.repeatPassword = t(\n                'i18next.recoverpassword.final.errormismatchedpasswords'\n            );\n        }\n        if (values.password && !/[!?\\-&_*]/.test(values.password)) {\n            errors.password = `${t(\n                'i18next.recoverpassword.final.erroratleastoneof'\n            )} !,?,-,&,_,*`;\n        }\n        if (values.password && /(.)\\1{2}/.test(values.password)) {\n            errors.password = t(\n                'i18next.recoverpassword.final.erroridenticalsymbols'\n            );\n        }\n\n        return errors;\n    }\n\n    return (\n        <>\n            {modalWindowActive && (\n                <ModalWindow\n                    buttonText=\"Ok\"\n                    modalText={text}\n                    switchShowPopap={handleShowPopap}\n                    handler={finishRecoverPassword}\n                    type={ModalWindowType.onlyInformationType}\n                />\n            )}\n            <Form\n                onSubmit={handleSubmit}\n                validate={validateForm}\n                subscription={{ submitting: true }}\n                render={({ handleSubmit }) => (\n                    <form className={style.form} onSubmit={handleSubmit}>\n                        <h3 className={style.formTitle}>\n                            {t('i18next.recoverpassword.final.title')}\n                        </h3>\n                        <p className={style.formText}>\n                            {t('i18next.recoverpassword.final.informtext')}\n                        </p>\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                            }}\n                            render={({ submitting }) => (\n                                <Field\n                                    component={LabeledInput}\n                                    name=\"password\"\n                                    inputRef={loginRef}\n                                    label={t(\n                                        'i18next.recoverpassword.final.newpassword'\n                                    )}\n                                    id=\"password\"\n                                    placeholder={t(\n                                        'i18next.recoverpassword.final.enternewpassword'\n                                    )}\n                                    type=\"password\"\n                                    disabled={submitting}\n                                />\n                            )}\n                        />\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                            }}\n                            render={({ submitting }) => (\n                                <Field\n                                    component={LabeledInput}\n                                    name=\"repeatPassword\"\n                                    label={t(\n                                        'i18next.recoverpassword.final.repeatnewpassword'\n                                    )}\n                                    id=\"repeat-password\"\n                                    placeholder={t(\n                                        'i18next.recoverpassword.final.enternewpassword'\n                                    )}\n                                    type=\"password\"\n                                    disabled={submitting}\n                                />\n                            )}\n                        />\n                        <FormSpy\n                            subscription={{\n                                pristine: true,\n                                errors: true,\n                                submitting: true,\n                            }}\n                            render={({ pristine, errors, submitting }) => (\n                                <Button\n                                    colorScheme={ButtonColors.green}\n                                    className={style.buttonOffset}\n                                    type=\"submit\"\n                                    disabled={\n                                        pristine ||\n                                        errors?.password ||\n                                        errors?.repeatPassword ||\n                                        submitting\n                                    }\n                                    loading={submitting}\n                                >\n                                    {t(\n                                        'i18next.recoverpassword.final.continue'\n                                    )}\n                                </Button>\n                            )}\n                        />\n\n                        <Link to={URLs.login.url} className={style.cancelLink}>\n                            {t('i18next.recoverpassword.final.cancel')}\n                        </Link>\n                    </form>\n                )}\n            />\n        </>\n        // <form className={style.form} onSubmit={handleSubmit}>\n        //     <h3 className={style.formTitle}>Востановление пароля</h3>\n        //     <p className={style.formText}>Установка нового пароля</p>\n        //     <LabeledInput\n        //         inputRef={loginRef}\n        //         label=\"Новый пароль:\"\n        //         id=\"password\"\n        //         name=\"password\"\n        //         placeholder=\"Введите новый пароль\"\n        //         value={password}\n        //         onChange={handlePasswordChange}\n        //         type=\"password\"\n        //         error={error}\n        //         disabled={loading}\n        //     />\n        //     <LabeledInput\n        //         label=\"Повторите новый пароль:\"\n        //         id=\"repeat-password\"\n        //         name=\"repeat-password\"\n        //         placeholder=\"Повторите новый пароль\"\n        //         value={repeatPassword}\n        //         onChange={handleRepeatPasswordChange}\n        //         type=\"password\"\n        //         error={!!error}\n        //         disabled={loading}\n        //     />\n        //     <Button\n        //         colorScheme={ButtonColors.green}\n        //         className={style.buttonOffset}\n        //         type=\"submit\"\n        //         disabled={loading}\n        //         loading={loading}\n        //     >\n        //         Продолжить\n        //     </Button>\n        //     <Link to={URLs.login.url} className={style.cancelLink}>\n        //         Отменить\n        //     </Link>\n        // </form>\n    );\n};\n\n// const mapStateToProps = ({\n//     recoverPassword: { finalStage },\n// }): MapStateToProps => ({\n//     password: finalStage.password,\n//     repeatPassword: finalStage.repeatPassword,\n//     error: finalStage.error,\n//     needRedirect: finalStage.needRedirect,\n//     loading: finalStage.loading,\n// });\n\n// const mapDispatchToProps = {\n//     submit: submitRecoverPasswordFinalForm,\n//     setPassword,\n//     setRepeatPassword,\n//     setError,\n//     reset,\n// };\n\n// FinalStage.propTypes = {\n//     password: PropTypes.string.isRequired,\n//     repeatPassword: PropTypes.string.isRequired,\n//     error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n//     needRedirect: PropTypes.bool.isRequired,\n//     loading: PropTypes.bool.isRequired,\n//     submit: PropTypes.func.isRequired,\n//     setPassword: PropTypes.func.isRequired,\n//     setRepeatPassword: PropTypes.func.isRequired,\n//     setError: PropTypes.func.isRequired,\n//     reset: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(FinalStage);\n"],"sourceRoot":""}