{"version":3,"sources":["containers/login/style.module.css","__data__/actions/login.ts","containers/login/login.tsx"],"names":["module","exports","submitLoginFormActionCreator","t","login","password","dispatch","a","baseAxios","method","url","data","result","window","localStorage","setItem","setIsLogin","response","code","Login","useTranslation","loginRef","useRef","isLogin","useSelector","selectors","useDispatch","values","submit","useEffect","current","focus","to","URLs","main","onSubmit","validate","errors","subscription","submitting","render","handleSubmit","className","style","form","formTitle","name","component","LabeledInput","inputRef","label","id","placeholder","link","recoverLogin","text","disabled","type","recoverPassword","pristine","colorScheme","ButtonColors","green","buttonOffset","loading","register"],"mappings":"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","file":"static/js/login-page.a7d6a4d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"style_form__CYylZ\",\"formTitle\":\"style_formTitle__3lxyt\",\"buttonOffset\":\"style_buttonOffset__WVzVY\",\"or\":\"style_or__2aTMH\",\"orLine\":\"style_orLine__1SApa\",\"orText\":\"style_orText__2BBxU\",\"register\":\"style_register__1v8GZ\"};","// import * as types from '../action-types';\n// import { getConfigValue } from '@ijl/cli';\nimport { setIsLogin } from '../store/slices/user';\nimport { baseAxios } from '../../utils';\n\n// const submitActionCreator = () => ({ type: types.LOGIN.SUBMIT });\n\n// const successActionCreator = () => ({\n//     type: types.LOGIN.SUCCESS,\n// });\n\n// export const loginChangeActionCreator = (value: string) => ({\n//     type: types.LOGIN.FORM_LOGIN_CHANGE,\n//     value,\n// });\n// export const passwordChangeActionCreator = (value: string) => ({\n//     type: types.LOGIN.FORM_PASSWORD_CHANGE,\n//     value,\n// });\n// export const setErrorActionCreator = (error: string | boolean) => ({\n//     type: types.LOGIN.SET_ERROR,\n//     error,\n// });\n\nexport const submitLoginFormActionCreator = ({ login, password }, t) => async (\n    dispatch\n) => {\n    // dispatch(submitActionCreator());\n    // const baseApiUrl = getConfigValue('e_zone.api');\n    // const response = await fetch(baseApiUrl + '/login', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json;charset=utf-8',\n    //     },\n    //     body: JSON.stringify({ login, password }),\n    // });\n    // if (response.ok) {\n    //     try {\n    //         const result = await response.json();\n    //         window.localStorage.setItem(result.login, result.token);\n    //         // dispatch(successActionCreator());\n    //         dispatch(setIsLogin(true));\n    //     } catch (error) {\n    //         console.error(error.message);\n    //         // dispatch(setErrorActionCreator(error.message));\n    //         return { login: error.message };\n    //     }\n    // } else {\n    //     try {\n    //         const result = await response.json();\n    //         // dispatch(\n    //         //     setErrorActionCreator(result.error || 'Неизвестная ошибка')\n    //         // );\n\n    //         return {\n    //             login:\n    //                 (result.code === 1 && t('i18next.login.errorcode1')) ||\n    //                 (result.code === 2 && t('i18next.login.errorcode2')) ||\n    //                 t('\"i18next.login.unknownerror\"'),\n    //         };\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n\n    try {\n        const result = await baseAxios({\n            method: 'POST',\n            url: '/login',\n            data: { login, password },\n        });\n\n        window.localStorage.setItem(result.data.login, 'sometoken');\n        // dispatch(successActionCreator());\n        dispatch(setIsLogin(true));\n    } catch (error) {\n        return {\n            login:\n                (error?.response?.data?.code === 1 &&\n                    t('i18next.login.errorcode1')) ||\n                (error?.response?.data?.code === 2 &&\n                    t('i18next.login.errorcode2')) ||\n                t('\"i18next.login.unknownerror\"'),\n        };\n    }\n};\n","import { LabeledInput, Button, ButtonColors } from '../../components';\nimport React, { useEffect, useRef } from 'react';\nimport style from './style.module.css';\nimport { Link, Redirect } from 'react-router-dom';\nimport { URLs } from '../../__data__/urls';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    // loginChangeActionCreator as setLogin,\n    // passwordChangeActionCreator as setPassword,\n    // setErrorActionCreator as setError,\n    submitLoginFormActionCreator as submit,\n} from '../../__data__/actions/login';\n// import PropTypes from 'prop-types';\nimport * as selectors from '../../__data__/selectors';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\ninterface Values {\n    login: string;\n    password: string;\n}\n\n// interface MapStateToProps {\n//     login: string;\n//     password: string;\n//     error: string | boolean;\n//     isReady: boolean;\n//     loading: boolean;\n// }\n\n// interface MapDispatchToProps {\n//     setLogin: (value: string) => void;\n//     setPassword: (value: string) => void;\n//     setError: (error: string | boolean) => void;\n//     submit: (data: Data) => void;\n// }\n\n// type LoginProps = MapStateToProps & MapDispatchToProps;\n\nconst Login: React.FC = () =>\n    //     {\n    //     login,\n    //     password,\n    //     error,\n    //     isReady,\n    //     setLogin,\n    //     setPassword,\n    //     setError,\n    //     loading,\n    //     submit,\n    // }\n    {\n        const { t } = useTranslation();\n\n        const loginRef = useRef<HTMLInputElement>();\n\n        // const login = useSelector(selectors.login.login);\n        // const password = useSelector(selectors.login.password);\n        // const error = useSelector(selectors.login.error);\n        const isLogin = useSelector(selectors.user.isLogin);\n        // const loading = useSelector(selectors.login.loading);\n        const dispatch = useDispatch();\n\n        useEffect(() => {\n            loginRef.current && loginRef.current.focus();\n        }, [loginRef.current]);\n\n        async function handleSubmit(\n            // event: React.FormEvent<HTMLFormElement>\n            values: Values\n        ) {\n            // event.preventDefault();\n            const { login, password } = values;\n\n            if (login && password) {\n                return dispatch(submit({ login, password }, t));\n            } else {\n                // dispatch(setError('Укажите логин и пароль'));\n            }\n        }\n\n        // function handleLoginChange(event) {\n        //     dispatch(setLogin(event.target.value));\n        // }\n\n        // function handlePasswordChange(event) {\n        //     dispatch(setPassword(event.target.value));\n        // }\n\n        if (isLogin) {\n            return <Redirect to={URLs.main.url} />;\n        }\n\n        function validateForm(values) {\n            interface Errors {\n                login?: string;\n                password?: string;\n            }\n            const errors: Errors = {};\n\n            if (!values.login) {\n                errors.login = t('i18next.login.errorenterlogin');\n            }\n            if (!values.password) {\n                errors.password = t('i18next.login.errorenterpassword');\n            }\n\n            return errors;\n        }\n\n        return (\n            <Form\n                onSubmit={handleSubmit}\n                validate={validateForm}\n                subscription={{ submitting: true }}\n                render={({ handleSubmit }) => (\n                    <form className={style.form} onSubmit={handleSubmit}>\n                        <h3 className={style.formTitle}>\n                            {t('i18next.login.title')}\n                        </h3>\n                        {/* <FormSpy\n                            subscription={{ submitting: true }}\n                            render={() => (\n                                <Button\n                                    colorScheme={ButtonColors.blue}\n                                    className={style.buttonOffset}\n                                >\n                                    {t('i18next.login.loginwithgoogle')}\n                                </Button>\n                            )}\n                        /> */}\n                        {/* <div className={style.or}>\n                            <span className={style.orLine}></span>\n                            <span className={style.orText}>\n                                {t('i18next.login.or')}\n                            </span>\n                            <span className={style.orLine}></span>\n                        </div> */}\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                            }}\n                            render={({ submitting }) => (\n                                <Field\n                                    name=\"login\"\n                                    component={LabeledInput}\n                                    inputRef={loginRef}\n                                    label={`${t('i18next.login.login')}:`}\n                                    id=\"login-input\"\n                                    placeholder={t('i18next.login.enterlogin')}\n                                    link={{\n                                        to: `${URLs.recoverLogin.url}`,\n                                        text: `${t(\n                                            'i18next.login.forgotlogin'\n                                        )}`,\n                                    }}\n                                    disabled={submitting}\n                                />\n                            )}\n                        />\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                            }}\n                            render={({ submitting }) => (\n                                <Field\n                                    name=\"password\"\n                                    component={LabeledInput}\n                                    label={t('i18next.login.password')}\n                                    id=\"password-input\"\n                                    placeholder={t(\n                                        'i18next.login.enterpassword'\n                                    )}\n                                    type=\"password\"\n                                    link={{\n                                        to: `${URLs.recoverPassword.url}`,\n                                        text: `${t(\n                                            'i18next.login.forgotpassword'\n                                        )}`,\n                                    }}\n                                    disabled={submitting}\n                                />\n                            )}\n                        />\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                                errors: true,\n                                pristine: true,\n                            }}\n                            render={({ submitting, errors, pristine }) => (\n                                <Button\n                                    colorScheme={ButtonColors.green}\n                                    className={style.buttonOffset}\n                                    type=\"submit\"\n                                    disabled={\n                                        submitting ||\n                                        pristine ||\n                                        errors.login ||\n                                        errors.password\n                                    }\n                                    loading={submitting}\n                                >\n                                    {t('i18next.login.continue')}\n                                </Button>\n                            )}\n                        />\n\n                        <Link className={style.register} to={URLs.register.url}>\n                            {t('i18next.login.register')}\n                        </Link>\n                    </form>\n                )}\n            />\n            // <form className={style.form} onSubmit={handleSubmit}>\n            //     <h3 className={style.formTitle}>\n            //     <RenderCount />\n            //         Войдите, чтобы продолжить\n            //     </h3>\n            //     <Button\n            //         colorScheme={ButtonColors.blue}\n            //         className={style.buttonOffset}\n            //     >\n            //         Войти с помощью Google\n            //     </Button>\n            //     <div className={style.or}>\n            //         <span className={style.orLine}></span>\n            //         <span className={style.orText}>или</span>\n            //         <span className={style.orLine}></span>\n            //     </div>\n            //     <p style={{ marginTop: '10px' }} className={style.orText}>\n            //         (существ. login-ы для проверки - login, login1; пароль\n            //         пока любой)\n            //     </p>\n            //     <LabeledInput\n            //         inputRef={loginRef}\n            //         label=\"Логин\"\n            //         id=\"login-input\"\n            //         name=\"login\"\n            //         placeholder=\"Введите логин\"\n            //         value={login}\n            //         onChange={handleLoginChange}\n            //         link={{\n            //             to: `${URLs.recoverLogin.url}`,\n            //             text: 'Забыли логин?',\n            //         }}\n            //         error={error}\n            //         disabled={loading}\n            //     />\n            //     <LabeledInput\n            //         label=\"Пароль\"\n            //         id=\"password-input\"\n            //         name=\"password\"\n            //         placeholder=\"Введите пароль\"\n            //         type=\"password\"\n            //         value={password}\n            //         onChange={handlePasswordChange}\n            //         link={{\n            //             to: `${URLs.recoverPassword.url}`,\n            //             text: 'Забыли пароль?',\n            //         }}\n            //         error={!!error}\n            //         disabled={loading}\n            //     />\n            //     <Button\n            //         disabled={loading}\n            //         loading={loading}\n            //         colorScheme={ButtonColors.green}\n            //         className={style.buttonOffset}\n            //         type=\"submit\"\n            //     >\n            //         Продолжить\n            //     </Button>\n            //     <Link className={style.register} to={URLs.register.url}>\n            //         Зарегистрироваться\n            //     </Link>\n            // </form>\n        );\n    };\n\n// function mapStateToProps({ login }): MapStateToProps {\n//     return {\n//         login: login.login,\n//         password: login.password,\n//         error: login.error,\n//         isReady: login.isReady,\n//         loading: login.loading,\n//     };\n// }\n\n// function mapDispatchToProps(dispatch): MapDispatchToProps {\n//     return {\n//         submit: (data) => dispatch(submitLoginFormActionCreator(data)),\n//         setLogin: (value) => dispatch(loginChangeActionCreator(value)),\n//         setPassword: (value) => dispatch(passwordChangeActionCreator(value)),\n//         setError: (error) => dispatch(setErrorActionCreator(error)),\n//     };\n// }\n\n// Login.propTypes = {\n//     login: PropTypes.string.isRequired,\n//     password: PropTypes.string.isRequired,\n//     error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n//     isReady: PropTypes.bool.isRequired,\n//     loading: PropTypes.bool.isRequired,\n//     setLogin: PropTypes.func.isRequired,\n//     setPassword: PropTypes.func.isRequired,\n//     setError: PropTypes.func.isRequired,\n//     submit: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Login);\nexport default Login;\n"],"sourceRoot":""}