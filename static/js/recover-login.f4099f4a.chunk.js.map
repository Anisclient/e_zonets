{"version":3,"sources":["containers/recover-login/steps/style.module.css","containers/recover-login/recover-login.tsx","__data__/actions/recover-login-confirm-stage.ts","__data__/actions/recover-login-input-stage.ts","containers/recover-login/steps/input-stage.tsx","containers/recover-login/steps/confirm-stage.tsx"],"names":["module","exports","RecoverLoginStep","recLoginConfirmFormSubmit","t","code","dispatch","a","Promise","resolve","reject","forge","pki","rsa","generateKeyPair","bits","workers","_","keypair","pubkey","publicKeyToPem","publicKey","baseAxios","method","url","data","response","decodedLogin","privateKey","decrypt","util","decode64","login","successActionCreator","catch","errorObj","submitRecoverLoginForm","email","message","steps","INPUT_STEP","setStep","loginRef","useRef","useTranslation","useSelector","selectors","inputStage","useDispatch","values","submit","useEffect","current","focus","CONFIRM_STEP","reset","onSubmit","validate","errors","subscription","submitting","render","handleSubmit","className","style","form","formTitle","formText","name","component","LabeledInput","inputRef","label","id","placeholder","disabled","pristine","colorScheme","ButtonColors","green","buttonOffset","type","loading","to","URLs","register","recoveredLogin","confirmStage","recovered","auth","RecoverLogin","useState","currentStep","setCurrentStep","Stage"],"mappings":"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","file":"static/js/recover-login.f4099f4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"style_form__3RTON\",\"formTitle\":\"style_formTitle__33m6y\",\"buttonOffset\":\"style_buttonOffset__32AHw\",\"formText\":\"style_formText__3EtuQ\",\"recovered\":\"style_recovered__2miMe\",\"register\":\"style_register__EKmjU\",\"auth\":\"style_auth__GUOtJ\"};","import React, { ReactElement, useState } from 'react';\nimport { ConfirmStage } from './steps/confirm-stage';\nimport { InputStage } from './steps/input-stage';\n\n/* eslint-disable no-unused-vars */\nexport interface StageProps {\n    setStep: (step: RecoverLoginStep) => void;\n}\n\nexport enum RecoverLoginStep {\n    INPUT_STEP,\n    CONFIRM_STEP,\n}\n\nconst steps = {\n    [RecoverLoginStep.INPUT_STEP]: InputStage,\n    [RecoverLoginStep.CONFIRM_STEP]: ConfirmStage,\n};\n\nfunction RecoverLogin(): ReactElement {\n    const [currentStep, setCurrentStep] = useState(RecoverLoginStep.INPUT_STEP);\n    const Stage: React.FC<StageProps> = steps[currentStep];\n\n    return <Stage setStep={setCurrentStep} />;\n}\n\nexport default RecoverLogin;\n","// import * as types from '../action-types';\n// import { getConfigValue } from '@ijl/cli';\nimport forge from 'node-forge';\nimport { baseAxios } from '../../utils';\nimport { handleSuccess as successActionCreator } from '../store/slices/recover-login/confirm-stage';\n\n// const submitActionCreator = () => ({\n//     type: types.RECOVER_LOGIN.CONFIRM.SUBMIT,\n// });\n\n// const successActionCreator = (data: unknown) => ({\n//     type: types.RECOVER_LOGIN.CONFIRM.SUCCESS,\n//     data,\n// });\n\n// export const setErrorActionCreator = (error: string | boolean) => ({\n//     type: types.RECOVER_LOGIN.CONFIRM.SET_ERROR,\n//     error,\n// });\n\n// export const setCodeActionCreator = (code: string) => ({\n//     type: types.RECOVER_LOGIN.CONFIRM.FORM_CODE_CHANGE,\n//     code,\n// });\n\n// export const setResetData = () => ({\n//     type: types.RECOVER_LOGIN.CONFIRM.SET_RESET,\n// });\n\nexport const recLoginConfirmFormSubmit = ({ code }, t) => async (dispatch) => {\n    // dispatch(submitActionCreator());\n    // const baseApiUrl = getConfigValue('e_zone.api');\n\n    return new Promise(function (resolve, reject) {\n        const { rsa } = forge.pki;\n        rsa.generateKeyPair(\n            { bits: 2048, workers: 2 },\n            async function (_, keypair) {\n                const pubkey = forge.pki.publicKeyToPem(keypair.publicKey);\n                try {\n                    // const response = await fetch(\n                    //     baseApiUrl + '/recover/login/confirm',\n                    //     {\n                    //         method: 'POST',\n                    //         headers: {\n                    //             'Content-Type':\n                    //                 'application/json;charset=utf-8',\n                    //         },\n                    //         body: JSON.stringify({\n                    //             code,\n                    //             pubkey,\n                    //         }),\n                    //     }\n                    // );\n\n                    // if (response.ok) {\n                    //     try {\n                    //         const result = await response.json();\n                    //         const decodedLogin = keypair.privateKey.decrypt(\n                    //             forge.util.decode64(result.login),\n                    //             'RSA-OAEP'\n                    //         );\n                    //         // dispatch(successActionCreator(result.login));\n                    //         dispatch(successActionCreator(decodedLogin));\n                    //         resolve(decodedLogin);\n                    //     } catch (error) {\n                    //         console.error(error.message);\n                    //         // dispatch(setErrorActionCreator(error.message));\n                    //         reject({ code: error.message });\n                    //     }\n                    // } else {\n                    //     try {\n                    //         const result = await response.json();\n                    //         // dispatch(setErrorActionCreator(result.error));\n                    //         reject({\n                    //             code:\n                    //                 result.code === 2 &&\n                    //                 t(\n                    //                     'i18next.recoverlogin.confirm.errorcode2'\n                    //                 ),\n                    //         });\n                    //     } catch (error) {\n                    //         reject({ code: error.message });\n                    //     }\n                    // }\n                    const response = await baseAxios({\n                        method: 'POST',\n                        url: '/recover/login/confirm',\n                        data: {\n                            code,\n                            pubkey,\n                        },\n                    });\n                    const decodedLogin = keypair.privateKey.decrypt(\n                        forge.util.decode64(response?.data?.login),\n                        'RSA-OAEP'\n                    );\n                    // dispatch(successActionCreator(result.login));\n                    dispatch(successActionCreator(decodedLogin));\n                    resolve(decodedLogin);\n                } catch (error) {\n                    reject({\n                        code:\n                            error?.response?.data?.code === 2 &&\n                            t('i18next.recoverlogin.confirm.errorcode2'),\n                    });\n                }\n            }\n        );\n    }).catch((errorObj) => {\n        return errorObj;\n    });\n};\n","// import * as types from '../action-types';\n// import { getConfigValue } from '@ijl/cli';\nimport { baseAxios } from '../../utils';\nimport { handleSuccess as successActionCreator } from '../store/slices/recover-login/input-stage';\n\n// const submitActionCreator = () => ({\n//     type: types.RECOVER_LOGIN.INPUT.SUBMIT,\n// });\n\n// const successActionCreator = (data: unknown) => ({\n//     type: types.RECOVER_LOGIN.INPUT.SUCCESS,\n//     data,\n// });\n\n// export const emailChangeActionCreator = (email: string) => ({\n//     type: types.RECOVER_LOGIN.INPUT.FORM_EMAIL_CHANGE,\n//     email,\n// });\n\n// export const setErrorActionCreator = (error: string | boolean) => ({\n//     type: types.RECOVER_LOGIN.INPUT.SET_ERROR,\n//     error,\n// });\n\n// export const resetDataActionCreator = () => ({\n//     type: types.RECOVER_LOGIN.INPUT.SET_RESET,\n// });\n\nexport const submitRecoverLoginForm = ({ email }, t) => async (dispatch) => {\n    // dispatch(submitActionCreator());\n    // const baseApiUrl = getConfigValue('e_zone.api');\n    // const response = await fetch(baseApiUrl + '/recover/login', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json;charset=utf-8',\n    //     },\n    //     body: JSON.stringify({ email }),\n    // });\n\n    // if (response.ok) {\n    //     try {\n    //         const answer = await response.json();\n    //         dispatch(successActionCreator(answer.message));\n    //     } catch (error) {\n    //         console.error(error.message);\n    //         // dispatch(setErrorActionCreator(error.message));\n    //         return { email: error.message };\n    //     }\n    // } else {\n    //     try {\n    //         const result = await response.json();\n    //         // dispatch(setErrorActionCreator(result.error));\n    //         return {\n    //             email:\n    //                 result.code === 1 &&\n    //                 t('i18next.recoverlogin.input.errorcode1'),\n    //         };\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n    try {\n        const response = await baseAxios({\n            method: 'POST',\n            url: '/recover/login',\n            data: {\n                email,\n            },\n        });\n        dispatch(successActionCreator(response.data.message));\n    } catch (error) {\n        return {\n            email:\n                error?.response?.data?.code === 1 &&\n                t('i18next.recoverlogin.input.errorcode1'),\n        };\n    }\n};\n","import { LabeledInput, Button, ButtonColors } from '../../../components';\nimport React, { useEffect, useRef } from 'react';\nimport style from './style.module.css';\nimport { RecoverLoginStep, StageProps } from '../recover-login';\nimport { Link } from 'react-router-dom';\nimport { URLs } from '../../../__data__/urls';\nimport PropTypes from 'prop-types';\nimport {\n    // emailChangeActionCreator as setEmail,\n    // setErrorActionCreator as setError,\n    submitRecoverLoginForm as submit,\n    // resetDataActionCreator as reset,\n} from '../../../__data__/actions/recover-login-input-stage';\nimport { handleResetData as reset } from '../../../__data__/store/slices/recover-login/input-stage';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as selectors from '../../../__data__/selectors';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport { useTranslation } from 'react-i18next';\n// import { connect } from 'react-redux';\n\n/* eslint-disable no-unused-vars */\n\n// interface MapStateToProps {\n//     data: Record<string, unknown>;\n//     email: string;\n//     error: string | boolean;\n//     loading: boolean;\n// }\n\ninterface Values {\n    email: string;\n}\n\n// interface MapDispatchToProps {\n//     submit: (data: Data) => void;\n//     setEmail: (value: string) => void;\n//     setError: (value: string | boolean) => void;\n//     reset: () => void;\n// }\n\n// type InputStageProps = StageProps & MapStateToProps & MapDispatchToProps;\n\nexport const InputStage: React.FC<StageProps> = ({\n    setStep,\n    // data,\n    // email,\n    // error,\n    // loading,\n    // submit,\n    // setEmail,\n    // setError,\n    // reset,\n}) => {\n    const loginRef = useRef<HTMLInputElement>();\n    const { t } = useTranslation();\n\n    const data = useSelector(selectors.recoverLogin.inputStage.data);\n    // const email = useSelector(selectors.recoverLogin.inputStage.email);\n    // const error = useSelector(selectors.recoverLogin.inputStage.error);\n    // const loading = useSelector(selectors.recoverLogin.inputStage.loading);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        loginRef.current && loginRef.current.focus();\n    }, [loginRef.current]);\n\n    useEffect(() => {\n        if (data) {\n            setStep(RecoverLoginStep.CONFIRM_STEP);\n            dispatch(reset());\n        }\n    }, [data]);\n\n    async function handleSubmit(\n        // event: React.FormEvent<HTMLFormElement>\n        values: Values\n    ) {\n        // event.preventDefault();\n        const { email } = values;\n\n        if (email) {\n            return dispatch(submit({ email }, t));\n        } else {\n            // dispatch(setError('Необходимо указать email'));\n        }\n    }\n\n    // function handleChange(event) {\n    //     dispatch(setEmail(event.target.value));\n    // }\n\n    function validateForm(values) {\n        interface Errors {\n            email?: string;\n        }\n        const errors: Errors = {};\n        if (!values.email) {\n            errors.email = t('i18next.recoverlogin.input.erroremailisrequired');\n        }\n        return errors;\n    }\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            validate={validateForm}\n            subscription={{ submitting: true }}\n            render={({ handleSubmit }) => (\n                <form className={style.form} onSubmit={handleSubmit}>\n                    <h3 className={style.formTitle}>\n                        {t('i18next.recoverlogin.input.title')}\n                    </h3>\n                    <p className={style.formText}>\n                        {t('i18next.recoverlogin.input.informtext')}\n                    </p>\n                    <FormSpy\n                        render={({ submitting }) => (\n                            <Field\n                                name=\"email\"\n                                component={LabeledInput}\n                                inputRef={loginRef}\n                                label={t(\n                                    'i18next.recoverlogin.input.youremail'\n                                )}\n                                id=\"email-input\"\n                                placeholder={t(\n                                    'i18next.recoverlogin.input.enteremail'\n                                )}\n                                disabled={submitting}\n                            />\n                        )}\n                    />\n                    <FormSpy\n                        subscription={{\n                            pristine: true,\n                            errors: true,\n                            submitting: true,\n                        }}\n                        render={({ pristine, errors, submitting }) => (\n                            <Button\n                                colorScheme={ButtonColors.green}\n                                className={style.buttonOffset}\n                                type=\"submit\"\n                                disabled={\n                                    pristine || errors.email || submitting\n                                }\n                                loading={submitting}\n                            >\n                                {t('i18next.recoverlogin.input.continue')}\n                            </Button>\n                        )}\n                    />\n                    <Link to={URLs.login.url} className={style.register}>\n                        {t('i18next.recoverlogin.input.cancel')}\n                    </Link>\n                </form>\n            )}\n        />\n        // <form className={style.form} onSubmit={handleSubmit}>\n        //     <h3 className={style.formTitle}>Восстановление логина</h3>\n        //     <RenderCount/>\n        //     <p className={style.formText}>\n        //         На введенный email придет код подтверждения\n        //     </p>\n        //     <LabeledInput\n        //         inputRef={loginRef}\n        //         label=\"Ваш email:\"\n        //         id=\"email-input\"\n        //         name=\"email\"\n        //         placeholder=\"Введите email\"\n        //         value={email}\n        //         onChange={handleChange}\n        //         error={error}\n        //         disabled={loading}\n        //     />\n        //     <Button\n        //         disabled={loading}\n        //         loading={loading}\n        //         colorScheme={ButtonColors.green}\n        //         className={style.buttonOffset}\n        //         type=\"submit\"\n        //     >\n        //     <RenderCount/>\n        //         Продолжить\n        //     </Button>\n        //     <Link to={URLs.login.url} className={style.register}>\n        //         Отменить\n        //     </Link>\n        // </form>\n    );\n};\n\n// const mapStateToProps = ({\n//     recoverLogin: { inputStage },\n// }): MapStateToProps => ({\n//     data: inputStage.data,\n//     email: inputStage.email,\n//     error: inputStage.error,\n//     loading: inputStage.loading,\n// });\n\n// const mapDispatchToProps = (dispatch): MapDispatchToProps => ({\n//     submit: (data: Data) => dispatch(submitRecoverLoginForm(data)),\n//     setEmail: (email: string) => dispatch(emailChangeActionCreator(email)),\n//     setError: (error: string | boolean) =>\n//         dispatch(setErrorActionCreator(error)),\n//     reset: () => dispatch(resetDataActionCreator()),\n// });\n\nInputStage.propTypes = {\n    // data: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.string]),\n    // email: PropTypes.string.isRequired,\n    // error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n    // loading: PropTypes.bool.isRequired,\n    // submit: PropTypes.func.isRequired,\n    // setEmail: PropTypes.func.isRequired,\n    // setError: PropTypes.func.isRequired,\n    // reset: PropTypes.func.isRequired,\n    setStep: PropTypes.func.isRequired,\n};\n\n// export default connect(mapStateToProps, mapDispatchToProps)(InputStage);\n","import { LabeledInput, Button, ButtonColors } from '../../../components';\nimport React, { useEffect, useRef } from 'react';\nimport style from './style.module.css';\nimport { Link } from 'react-router-dom';\nimport { URLs } from '../../../__data__/urls';\n// import { connect } from 'react-redux';\nimport {\n    recLoginConfirmFormSubmit as submit,\n    // setCodeActionCreator as setCode,\n    // setErrorActionCreator as setError,\n    // setResetData as reset,\n} from '../../../__data__/actions/recover-login-confirm-stage';\nimport { handleResetData as reset } from '../../../__data__/store/slices/recover-login/confirm-stage';\n// import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as selectors from '../../../__data__/selectors';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\n// interface MapStateToProps {\n//     code: string;\n//     error: string | boolean;\n//     loading: boolean;\n//     recoveredLogin: string;\n// }\n\ninterface Values {\n    code: number;\n}\n\n// interface MapDispatchToProps {\n//     submit: (data: Data) => void;\n//     setCode: (code: string) => void;\n//     setError: (error: string | boolean) => void;\n//     reset: () => void;\n// }\n\n// type ConfirmStageProps = MapStateToProps & MapDispatchToProps;\n\nexport const ConfirmStage: React.FC = () =>\n    // {\n    // code,\n    // error,\n    // loading,\n    // recoveredLogin,\n    // submit,\n    // setCode,\n    // setError,\n    // reset,\n    // }\n    {\n        const loginRef = useRef<HTMLInputElement>();\n        const { t } = useTranslation();\n\n        // const code = useSelector(selectors.recoverLogin.confirmStage.code);\n        // const error = useSelector(selectors.recoverLogin.confirmStage.error);\n        // const loading = useSelector(\n        //     selectors.recoverLogin.confirmStage.loading\n        // );\n        const recoveredLogin = useSelector(\n            selectors.recoverLogin.confirmStage.recoveredLogin\n        );\n\n        const dispatch = useDispatch();\n\n        useEffect(() => {\n            loginRef.current && loginRef.current.focus();\n        }, [loginRef.current]);\n\n        useEffect(() => {\n            dispatch(reset());\n        }, []);\n\n        async function handleSubmit(\n            // event: React.FormEvent<HTMLFormElement>\n            values: Values\n        ) {\n            // event.preventDefault();\n            const { code } = values;\n\n            if (code) {\n                return dispatch(submit({ code }, t));\n            }\n            // else {\n            // dispatch(setError('Укажите проверочный код'));\n            // }\n        }\n\n        // function handleChange(event) {\n        //     dispatch(setCode(event.target.value));\n        // }\n\n        function validateForm(values) {\n            interface Errors {\n                code?: string;\n            }\n            const errors: Errors = {};\n\n            if (!values.code) {\n                errors.code = t(\n                    'i18next.recoverlogin.confirm.errorecodeisrequired'\n                );\n            }\n\n            return errors;\n        }\n\n        return (\n            <Form\n                onSubmit={handleSubmit}\n                validate={validateForm}\n                subscription={{ submitting: true }}\n                render={({ handleSubmit }) => (\n                    <form className={style.form} onSubmit={handleSubmit}>\n                        <h3 className={style.formTitle}>\n                            {t('i18next.recoverlogin.confirm.confirmation')}\n                        </h3>\n                        {!recoveredLogin && (\n                            <>\n                                <p className={style.formText}>\n                                    {t(\n                                        'i18next.recoverlogin.confirm.informtext'\n                                    )}\n                                </p>\n                                <FormSpy\n                                    render={({ submitting }) => (\n                                        <Field\n                                            name=\"code\"\n                                            component={LabeledInput}\n                                            inputRef={loginRef}\n                                            label={t(\n                                                'i18next.recoverlogin.confirm.code'\n                                            )}\n                                            id=\"code-input\"\n                                            placeholder={t(\n                                                'i18next.recoverlogin.confirm.entercode'\n                                            )}\n                                            type=\"number\"\n                                            disabled={submitting}\n                                            // disabled={loading}\n                                            // error={error}\n                                        />\n                                    )}\n                                />\n                            </>\n                        )}\n                        {recoveredLogin && (\n                            <div className={style.recovered}>\n                                <h3 className={style.formTitle}>\n                                    {t(\n                                        'i18next.recoverlogin.confirm.yourlogin'\n                                    )}\n                                </h3>\n                                <p className={style.formText}>\n                                    {recoveredLogin}\n                                </p>\n                            </div>\n                        )}\n                        {!recoveredLogin ? (\n                            <>\n                                <FormSpy\n                                    subscription={{\n                                        pristine: true,\n                                        submitting: true,\n                                        errors: true,\n                                    }}\n                                    render={({\n                                        pristine,\n                                        submitting,\n                                        errors,\n                                    }) => (\n                                        <Button\n                                            colorScheme={ButtonColors.green}\n                                            className={style.buttonOffset}\n                                            type=\"submit\"\n                                            disabled={\n                                                pristine ||\n                                                errors.code ||\n                                                submitting\n                                            }\n                                            loading={submitting}\n                                            // loading={loading}\n                                            // disabled={loading}\n                                        >\n                                            {t(\n                                                'i18next.recoverlogin.confirm.continue'\n                                            )}\n                                        </Button>\n                                    )}\n                                />\n                                <Link\n                                    to={URLs.login.url}\n                                    className={style.register}\n                                >\n                                    {t('i18next.recoverlogin.confirm.cancel')}\n                                </Link>\n                            </>\n                        ) : (\n                            <Link to={URLs.login.url} className={style.auth}>\n                                {t('i18next.recoverlogin.confirm.login')}\n                            </Link>\n                        )}\n                    </form>\n                )}\n            />\n            // <form className={style.form} onSubmit={handleSubmit}>\n            //     <h3 className={style.formTitle}>Подтверждение</h3>\n            //     <p className={style.formText}>\n            //         Введите код (правильный код - 123)\n            //     </p>\n            //     {!recoveredLogin && (\n            //         <LabeledInput\n            //             inputRef={loginRef}\n            //             label=\"Код:\"\n            //             id=\"code-input\"\n            //             name=\"code\"\n            //             placeholder=\"Введите код\"\n            //             value={code}\n            //             onChange={handleChange}\n            //             type=\"number\"\n            //             error={error}\n            //             disabled={loading}\n            //         />\n            //     )}\n            //     {recoveredLogin && (\n            //         <div className={style.recovered}>\n            //             <h3 className={style.formTitle}>Ваш логин:</h3>\n            //             <p className={style.formText}>{recoveredLogin}</p>\n            //         </div>\n            //     )}\n            //     {!recoveredLogin ? (\n            //         <>\n            //             <Button\n            //                 colorScheme={ButtonColors.green}\n            //                 className={style.buttonOffset}\n            //                 type=\"submit\"\n            //                 disabled={loading}\n            //                 loading={loading}\n            //             >\n            //                 Продолжить\n            //             </Button>\n            //             <Link to={URLs.login.url} className={style.register}>\n            //                 Отменить\n            //             </Link>\n            //         </>\n            //     ) : (\n            //         <Link to={URLs.login.url} className={style.auth}>\n            //             Авторизоваться\n            //         </Link>\n            //     )}\n            // </form>\n        );\n    };\n\n// const mapStateToProps = ({\n//     recoverLogin: { confirmStage },\n// }): MapStateToProps => ({\n//     code: confirmStage.code,\n//     error: confirmStage.error,\n//     loading: confirmStage.loading,\n//     recoveredLogin: confirmStage.recoveredLogin,\n// });\n\n// const mapDispatchToProps = (dispatch): MapDispatchToProps => ({\n//     submit: (data: Data) => dispatch(recLoginConfirmFormSubmit(data)),\n//     setCode: (code: string) => dispatch(setCodeActionCreator(code)),\n//     setError: (error: string | boolean) =>\n//         dispatch(setErrorActionCreator(error)),\n//     reset: () => dispatch(setResetData()),\n// });\n\n// ConfirmStage.propTypes = {\n//     code: PropTypes.string.isRequired,\n//     error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n//     loading: PropTypes.bool.isRequired,\n//     recoveredLogin: PropTypes.string.isRequired,\n//     submit: PropTypes.func.isRequired,\n//     setCode: PropTypes.func.isRequired,\n//     setError: PropTypes.func.isRequired,\n//     reset: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ConfirmStage);\n"],"sourceRoot":""}