{"version":3,"sources":["components/modal-window/modal-window.tsx","components/modal-window/style.module.css","containers/order-page/style.module.css","components/radio-input/style.module.css","components/textarea/style.module.css","components/radio-input/index.ts","components/radio-input/radio-input.tsx","components/textarea/index.ts","components/textarea/textarea.tsx","containers/order-page/order-page.tsx"],"names":["ModalWindowType","ModalWindow","modalText","buttonText","switchShowPopap","handler","type","t","useTranslation","className","style","modal","onClick","colorScheme","ButtonColors","blue","buttonOffset","forBasket","lightgreen","overlay","module","exports","RadioInput","id","input","children","rest","label","String","text","TextArea","meta","wrapper","error","submitError","modifiedSinceLastSubmit","modified","cn","textarea","danger","OrderPage","orderRef","useRef","history","useHistory","useState","modalWindowActive","changeModalWindowActive","setText","allProducts","useSelector","basket","Object","keys","map","key","productsById","length","push","URLs","main","url","dispatch","useDispatch","handleShowPopap","values","a","name","phone","address","baseAxios","method","data","response","message","useEffect","current","focus","window","localStorage","removeItem","clearBasket","onlyInformationType","onSubmit","initialValues","delivery","validate","errors","test","subscription","submitting","render","handleSubmit","form","formTitle","component","LabeledInput","inputRef","placeholder","disabled","or","orLine","orText","value","pristine","green","loading","back","to"],"mappings":"mLAOYA,E,oDAAAA,O,6CAAAA,I,0BAAAA,M,KAaZ,IAuCeC,EAvCiC,SAAC,GAM1C,IALHC,EAKE,EALFA,UACAC,EAIE,EAJFA,WACAC,EAGE,EAHFA,gBACAC,EAEE,EAFFA,QACAC,EACE,EADFA,KAEQC,EAAMC,cAAND,EAMR,OACI,gCACI,sBAAKE,UAAWC,IAAMC,MAAtB,UACI,mBAAGF,UAAWC,IAAMR,UAApB,SAAgCA,IAChC,cAAC,IAAD,CACIU,QAVhB,WACIR,IACAC,KASYQ,YAAaC,IAAaC,KAC1BN,UAAWC,IAAMM,aAHrB,SAKKb,IAEJG,IAASN,EAAgBiB,WACtB,cAAC,IAAD,CACIJ,YAAaC,IAAaI,WAC1BT,UAAWC,IAAMM,aACjBJ,QAASR,EAHb,SAKKG,EAAE,mCAIf,qBAAKE,UAAWC,IAAMS,e,oBCrDlCC,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,oBCApGD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,UAAY,yBAAyB,aAAe,4BAA4B,GAAK,kBAAkB,OAAS,sBAAsB,OAAS,sBAAsB,KAAO,oBAAoB,SAAW,0B,oBCAxPD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,KAAO,sB,oBCAnFD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,qBAAqB,SAAW,wBAAwB,OAAS,wB,4LCC7GC,MCER,YAKuB,IAJ1BC,EAIyB,EAJzBA,GACAC,EAGyB,EAHzBA,MACAC,EAEyB,EAFzBA,SACGC,EACsB,yCACzB,OACI,wBAAOjB,UAAWC,IAAMiB,MAAxB,UACI,+CACIJ,GAAIK,OAAOL,GACXd,UAAWC,IAAMc,MACjBlB,KAAK,SACDkB,GACAE,IAER,qBAAKjB,UAAWC,IAAMmB,KAAtB,SAA6BJ,Q,mCCjB1BK,ECK0B,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAOO,EAAV,EAAUA,KAASL,EAAnB,uCACrC,sBAAKjB,UAAWC,IAAMsB,QAAtB,YACU,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAME,SACC,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMG,gBAAe,OAACH,QAAD,IAACA,OAAD,EAACA,EAAMI,4BADhC,OAEGJ,QAFH,IAEGA,OAFH,EAEGA,EAAMK,WACF,qBAAK3B,UAAWC,IAAMuB,MAAtB,UACS,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAME,SAAN,OAAeF,QAAf,IAAeA,OAAf,EAAeA,EAAMG,eAGlC,kDACIzB,UAAW4B,IACP3B,IAAM4B,WACD,OAAJP,QAAI,IAAJA,OAAA,EAAAA,EAAME,SACE,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMG,gBAAe,OAACH,QAAD,IAACA,OAAD,EAACA,EAAMI,4BADjC,OAEIJ,QAFJ,IAEIA,OAFJ,EAEIA,EAAMK,WACN1B,IAAM6B,SAEVf,GACAE,Q,kCC0RDc,UAtRa,WAAO,IACvBjC,EAAMC,cAAND,EAEFkC,EAAWC,mBACXC,EAAUC,cAJc,EAMuBC,oBAAS,GANhC,mBAMvBC,EANuB,KAMJC,EANI,OAONF,mBAAS,IAPH,mBAOvBhB,EAPuB,KAOjBmB,EAPiB,KASxBC,EAAcC,aAChB,qBAAGC,OAAoBF,eAOI,IAJPG,OAAOC,KAAKJ,GAAaK,KAAI,SAACC,GAClD,OAAON,EAAYM,GAAKC,aAAa,MAGrBC,QAChBd,EAAQe,KAAR,UAAgBC,IAAKC,KAAKC,MAG9B,IAAMC,EAAWC,cAMjB,SAASC,IACLjB,GAAyBD,GA5BC,4CAqC9B,WAA4BmB,GAA5B,yBAAAC,EAAA,yDACYC,EAAyBF,EAAzBE,KAAMC,EAAmBH,EAAnBG,MAAOC,EAAYJ,EAAZI,SAEjBF,IAAQC,EAHhB,0CAyCmCE,YAAU,CAC7BC,OAAQ,OACRV,IAAK,SACLW,KAAM,CACFL,OACAC,QACAC,QAASA,GAAoB,YA/CjD,OAyCkBI,EAzClB,OAkDYzB,EAAQ,GAAD,OACAzC,EAAE,4CADF,OAECkE,EAASD,KAAKE,UAGtBV,IAvDZ,2EAyDmB,CAAEG,KAAI,OAAC,EAAD,6BAAE,KAAOM,gBAAT,iBAAE,EAAiBD,YAAnB,aAAE,EAAuBvC,QAzDlD,2DArC8B,sBAmI9B,OA5GA0C,qBAAU,WACNlC,EAASmC,SAAWnC,EAASmC,QAAQC,UACtC,CAACpC,EAASmC,UA2GT,qCACK9B,GACG,cAAC,IAAD,CACI3C,WAAW,KACXD,UAAW2B,EACXzB,gBAAiB4D,EACjB3D,QA3GhB,WACI2D,IACAc,OAAOC,aAAaC,WAAW,oCAC/BlB,EAASmB,gBAyGG3E,KAAMN,IAAgBkF,sBAG9B,cAAC,IAAD,CACIC,SA/IkB,4CAgJlBC,cAAe,CAAEC,SAAU,UAC3BC,SA9CZ,SAAsBrB,GAMlB,IAAMsB,EAAiB,GAuBvB,OArBKtB,EAAOE,OACRoB,EAAOpB,KAAO5D,EAAE,0CAGf0D,EAAOG,QACRmB,EAAOnB,MAAQ7D,EAAE,2CAIjB0D,EAAOG,QACN,sFAAsFoB,KACnFvB,EAAOG,SAGXmB,EAAOnB,MAAQ7D,EAAE,uCAGG,aAApB0D,EAAOoB,UAA4BpB,EAAOI,UAC1CkB,EAAOlB,QAAU9D,EAAE,6CAGhBgF,GAkBCE,aAAc,CAAEC,YAAY,GAC5BC,OAAQ,gBAAGC,EAAH,EAAGA,aAAH,OACJ,uBAAMnF,UAAWC,IAAMmF,KAAMV,SAAUS,EAAvC,UACI,oBAAInF,UAAWC,IAAMoF,UAArB,SACKvF,EAAE,gCAEP,cAAC,IAAD,CACIkF,aAAc,CACVC,YAAY,GAEhBC,OAAQ,gBAAGD,EAAH,EAAGA,WAAH,OACJ,cAAC,IAAD,CACIvB,KAAK,OACL4B,UAAWC,IACXC,SAAUxD,EACVd,MAAK,UAAKpB,EAAE,0BAAP,KACLgB,GAAG,OACH2E,YAAa3F,EACT,mCAEJ4F,SAAUT,OAItB,cAAC,IAAD,CACID,aAAc,CACVC,YAAY,GAEhBC,OAAQ,gBAAGD,EAAH,EAAGA,WAAH,OACJ,cAAC,IAAD,CACIvB,KAAK,QACL4B,UAAWC,IACXrE,MAAK,UAAKpB,EAAE,2BAAP,KACLgB,GAAG,QACH2E,YAAa3F,EACT,sCAEJD,KAAK,MACL6F,SAAUT,OAKtB,sBAAKjF,UAAWC,IAAM0F,GAAtB,UACI,sBAAM3F,UAAWC,IAAM2F,SACvB,sBAAM5F,UAAWC,IAAM4F,OAAvB,mBACQ/F,EAAE,kCADV,OAGA,sBAAME,UAAWC,IAAM2F,YAG3B,sBAAK5F,UAAWC,IAAM2E,SAAtB,UACI,cAAC,IAAD,CACIlB,KAAK,WACL4B,UAAWzE,EACXhB,KAAK,QACLiG,MAAM,SACNhF,GAAG,SALP,SAOKhB,EAAE,8BAEP,cAAC,IAAD,CACI4D,KAAK,WACL4B,UAAWzE,EACXhB,KAAK,QACLiG,MAAM,WACNhF,GAAG,WALP,SAOKhB,EAAE,mCAGX,cAAC,IAAD,CACIkF,aAAc,CACVxB,QAAQ,EACRyB,YAAY,GAEhBC,OAAQ,YAA6B,IAA1B1B,EAAyB,EAAzBA,OAAQyB,EAAiB,EAAjBA,WACf,MACwB,aAApBzB,EAAOoB,UACH,cAAC,IAAD,CACIlB,KAAK,UACL4B,UAAWjE,EACXoE,YAAa3F,EACT,0CAEJ4F,SAAUT,OAM9B,cAAC,IAAD,CACID,aAAc,CACVC,YAAY,EACZH,QAAQ,EACRiB,UAAU,EACVvC,QAAQ,GAEZ0B,OAAQ,gBACJD,EADI,EACJA,WACAH,EAFI,EAEJA,OACAiB,EAHI,EAGJA,SACAvC,EAJI,EAIJA,OAJI,OAMJ,cAAC,IAAD,CACIpD,YAAaC,IAAa2F,MAC1BhG,UAAWC,IAAMM,aACjBV,KAAK,SACL6F,SACIT,GACAc,GACAjB,EAAOpB,MACPoB,EAAOnB,OACc,aAApBH,EAAOoB,UACJE,EAAOlB,QAEfqC,QAAShB,EAZb,SAcKnF,EAAE,mCAIf,cAAC,IAAD,CAAME,UAAWC,IAAMiG,KAAMC,GAAIjD,IAAKR,OAAOU,IAA7C,SACKtD,EAAE","file":"static/js/order-page.8380e9b6.chunk.js","sourcesContent":["import React from 'react';\nimport style from './style.module.css';\nimport Button, { ButtonColors } from '../button';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\nexport enum ModalWindowType {\n    onlyInformationType,\n    forBasket,\n}\n\ninterface ModalWindowProps {\n    modalText: string;\n    buttonText: string;\n    switchShowPopap: () => void;\n    handler: () => void;\n    type: ModalWindowType;\n}\n\nconst ModalWindow: React.FC<ModalWindowProps> = ({\n    modalText,\n    buttonText,\n    switchShowPopap,\n    handler,\n    type,\n}) => {\n    const { t } = useTranslation();\n    function commitHandler() {\n        switchShowPopap();\n        handler();\n    }\n\n    return (\n        <div>\n            <div className={style.modal}>\n                <p className={style.modalText}>{modalText}</p>\n                <Button\n                    onClick={commitHandler}\n                    colorScheme={ButtonColors.blue}\n                    className={style.buttonOffset}\n                >\n                    {buttonText}\n                </Button>\n                {type === ModalWindowType.forBasket && (\n                    <Button\n                        colorScheme={ButtonColors.lightgreen}\n                        className={style.buttonOffset}\n                        onClick={switchShowPopap}\n                    >\n                        {t('i18next.modalwindow.cancel')}\n                    </Button>\n                )}\n            </div>\n            <div className={style.overlay}></div>\n        </div>\n    );\n};\n\nexport default ModalWindow;\n\nModalWindow.propTypes = {\n    modalText: PropTypes.string.isRequired,\n    buttonText: PropTypes.string.isRequired,\n    switchShowPopap: PropTypes.func.isRequired,\n    handler: PropTypes.func.isRequired,\n    type: PropTypes.oneOf([\n        ModalWindowType.onlyInformationType,\n        ModalWindowType.forBasket,\n    ]).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"style_modal__K5xBK\",\"buttonOffset\":\"style_buttonOffset__1106E\",\"overlay\":\"style_overlay__3brN4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"style_form__rY5sA\",\"formTitle\":\"style_formTitle__G5FbA\",\"buttonOffset\":\"style_buttonOffset__3j-Zg\",\"or\":\"style_or__1ERME\",\"orLine\":\"style_orLine__2ryH7\",\"orText\":\"style_orText__17IQn\",\"back\":\"style_back__3JbPN\",\"delivery\":\"style_delivery__eWXvL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"style_label__bTbHU\",\"input\":\"style_input__10mhh\",\"text\":\"style_text__1yaIY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__SLvqc\",\"error\":\"style_error__31L4p\",\"textarea\":\"style_textarea__1YSKX\",\"danger\":\"style_danger__6tNCc\"};","import { RadioInput } from './radio-input';\n\nexport default RadioInput;\n","import React from 'react';\nimport style from './style.module.css';\nimport { FieldRenderProps } from 'react-final-form';\n\nexport function RadioInput<T extends string>({\n    id,\n    input,\n    children,\n    ...rest\n}: FieldRenderProps<T, any>) {\n    return (\n        <label className={style.label}>\n            <input\n                id={String(id)}\n                className={style.input}\n                type=\"radio\"\n                {...input}\n                {...rest}\n            />\n            <div className={style.text}>{children}</div>\n        </label>\n    );\n}\n","import { TextArea } from './textarea';\n\nexport default TextArea;\n","import React from 'react';\nimport style from './style.module.css';\nimport { FieldRenderProps } from 'react-final-form';\nimport cn from 'classnames';\n\ntype Props = FieldRenderProps<string, any>;\n\nexport const TextArea: React.FC<Props> = ({ input, meta, ...rest }: Props) => (\n    <div className={style.wrapper}>\n        {(meta?.error ||\n            (meta?.submitError && !meta?.modifiedSinceLastSubmit)) &&\n            meta?.modified && (\n                <div className={style.error}>\n                    {meta?.error || meta?.submitError}\n                </div>\n            )}\n        <textarea\n            className={cn(\n                style.textarea,\n                (meta?.error ||\n                    (meta?.submitError && !meta?.modifiedSinceLastSubmit)) &&\n                    meta?.modified &&\n                    style.danger\n            )}\n            {...input}\n            {...rest}\n        />\n    </div>\n);\n","import { LabeledInput, Button, ButtonColors } from '../../components';\nimport React, { useEffect, useRef, useState } from 'react';\nimport style from './style.module.css';\nimport { Link, useHistory } from 'react-router-dom';\nimport { URLs } from '../../__data__/urls';\nimport { useDispatch } from 'react-redux';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport RadioInput from '../../components/radio-input';\nimport TextArea from '../../components/textarea';\nimport { AllProducts, clearBasket } from '../../__data__/store/reducers/basket';\nimport { useSelector } from 'react-redux';\nimport { AppStore } from '../../__data__/store/reducers';\n// import { getConfigValue } from '@ijl/cli';\nimport ModalWindow, { ModalWindowType } from '../../components/modal-window';\nimport { useTranslation } from 'react-i18next';\nimport { baseAxios } from '../../utils';\n\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-useless-escape */\n\ntype DeliveryMethod = 'pickup' | 'shipping';\n\ninterface Values {\n    name: string;\n    phone: string;\n    delivery?: DeliveryMethod;\n    address?: string;\n}\n\nconst OrderPage: React.FC = () => {\n    const { t } = useTranslation();\n\n    const orderRef = useRef<HTMLInputElement>();\n    const history = useHistory();\n\n    const [modalWindowActive, changeModalWindowActive] = useState(false);\n    const [text, setText] = useState('');\n\n    const allProducts = useSelector<AppStore, AllProducts | AllProducts[]>(\n        ({ basket }) => basket.allProducts\n    );\n\n    const productsByGroup = Object.keys(allProducts).map((key) => {\n        return allProducts[key].productsById[0];\n    });\n\n    if (productsByGroup.length === 0) {\n        history.push(`${URLs.main.url}`);\n    }\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        orderRef.current && orderRef.current.focus();\n    }, [orderRef.current]);\n\n    function handleShowPopap() {\n        changeModalWindowActive(!modalWindowActive);\n    }\n\n    function toClearBasket() {\n        handleShowPopap();\n        window.localStorage.removeItem('products-in-basket-local-storage');\n        dispatch(clearBasket());\n    }\n\n    async function handleSubmit(values: Values) {\n        const { name, phone, address } = values;\n\n        if (name && phone) {\n            // const baseApiUrl = getConfigValue('e_zone.api');\n            ////////////////////////start\n            // const response = await fetch(baseApiUrl + '/order', {\n            //     method: 'POST',\n            //     headers: {\n            //         'Content-Type': 'application/json;charset=utf-8',\n            //     },\n            //     body: JSON.stringify({\n            //         name,\n            //         phone,\n            //         address: address ? address : 'pickup',\n            //     }),\n            // });\n\n            // if (response.ok) {\n            //     try {\n            //         const result = await response.json();\n            //         setText(\n            //             `${t('i18next.orderpage.messageformodalwindow')}${\n            //                 result.message\n            //             }`\n            //         );\n            //         handleShowPopap();\n            //     } catch (error) {\n            //         console.error(error.message);\n            //         return { name: error.message };\n            //     }\n            // } else {\n            //     try {\n            //         const result = await response.json();\n            //         return { name: result.error };\n            //     } catch (error) {\n            //         console.error(error);\n            //     }\n            // }\n            ////////////////////////end\n            try {\n                const response = await baseAxios({\n                    method: 'POST',\n                    url: '/order',\n                    data: {\n                        name,\n                        phone,\n                        address: address ? address : 'pickup',\n                    },\n                });\n                setText(\n                    `${t('i18next.orderpage.messageformodalwindow')}${\n                        response.data.message\n                    }`\n                );\n                handleShowPopap();\n            } catch (error) {\n                return { name: error?.response?.data?.error };\n            }\n        }\n    }\n\n    function validateForm(values) {\n        interface Errors {\n            name?: string;\n            phone?: string;\n            address?: string;\n        }\n        const errors: Errors = {};\n\n        if (!values.name) {\n            errors.name = t('i18next.orderpage.errornameisrequired');\n        }\n\n        if (!values.phone) {\n            errors.phone = t('i18next.orderpage.errorphoneisrequired');\n        }\n\n        if (\n            values.phone &&\n            !/^(\\+7|7|8)?[\\s\\-]?\\(?[489][0-9]{2}\\)?[\\s\\-]?[0-9]{3}[\\s\\-]?[0-9]{2}[\\s\\-]?[0-9]{2}$/.test(\n                values.phone\n            )\n        ) {\n            errors.phone = t('i18next.orderpage.errorvalidnumber');\n        }\n\n        if (values.delivery === 'shipping' && !values.address) {\n            errors.address = t('i18next.orderpage.erroraddressisrequired');\n        }\n\n        return errors;\n    }\n\n    return (\n        <>\n            {modalWindowActive && (\n                <ModalWindow\n                    buttonText=\"Ok\"\n                    modalText={text}\n                    switchShowPopap={handleShowPopap}\n                    handler={toClearBasket}\n                    type={ModalWindowType.onlyInformationType}\n                />\n            )}\n            <Form\n                onSubmit={handleSubmit}\n                initialValues={{ delivery: 'pickup' }}\n                validate={validateForm}\n                subscription={{ submitting: true }}\n                render={({ handleSubmit }) => (\n                    <form className={style.form} onSubmit={handleSubmit}>\n                        <h3 className={style.formTitle}>\n                            {t('i18next.orderpage.ordering')}\n                        </h3>\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                            }}\n                            render={({ submitting }) => (\n                                <Field\n                                    name=\"name\"\n                                    component={LabeledInput}\n                                    inputRef={orderRef}\n                                    label={`${t('i18next.orderpage.name')}:`}\n                                    id=\"name\"\n                                    placeholder={t(\n                                        'i18next.orderpage.enteryourname'\n                                    )}\n                                    disabled={submitting}\n                                />\n                            )}\n                        />\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                            }}\n                            render={({ submitting }) => (\n                                <Field\n                                    name=\"phone\"\n                                    component={LabeledInput}\n                                    label={`${t('i18next.orderpage.phone')}:`}\n                                    id=\"phone\"\n                                    placeholder={t(\n                                        'i18next.orderpage.enterphonenumber'\n                                    )}\n                                    type=\"tel\"\n                                    disabled={submitting}\n                                />\n                            )}\n                        />\n\n                        <div className={style.or}>\n                            <span className={style.orLine}></span>\n                            <span className={style.orText}>\n                                {`${t('i18next.orderpage.obtainingway')}:`}\n                            </span>\n                            <span className={style.orLine}></span>\n                        </div>\n\n                        <div className={style.delivery}>\n                            <Field<DeliveryMethod>\n                                name=\"delivery\"\n                                component={RadioInput}\n                                type=\"radio\"\n                                value=\"pickup\"\n                                id=\"pickup\"\n                            >\n                                {t('i18next.orderpage.pickup')}\n                            </Field>\n                            <Field<DeliveryMethod>\n                                name=\"delivery\"\n                                component={RadioInput}\n                                type=\"radio\"\n                                value=\"shipping\"\n                                id=\"shipping\"\n                            >\n                                {t('i18next.orderpage.shipping')}\n                            </Field>\n                        </div>\n                        <FormSpy\n                            subscription={{\n                                values: true,\n                                submitting: true,\n                            }}\n                            render={({ values, submitting }) => {\n                                return (\n                                    values.delivery === 'shipping' && (\n                                        <Field\n                                            name=\"address\"\n                                            component={TextArea}\n                                            placeholder={t(\n                                                'i18next.orderpage.enterdeliveryaddress'\n                                            )}\n                                            disabled={submitting}\n                                        />\n                                    )\n                                );\n                            }}\n                        />\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                                errors: true,\n                                pristine: true,\n                                values: true,\n                            }}\n                            render={({\n                                submitting,\n                                errors,\n                                pristine,\n                                values,\n                            }) => (\n                                <Button\n                                    colorScheme={ButtonColors.green}\n                                    className={style.buttonOffset}\n                                    type=\"submit\"\n                                    disabled={\n                                        submitting ||\n                                        pristine ||\n                                        errors.name ||\n                                        errors.phone ||\n                                        (values.delivery === 'shipping' &&\n                                            errors.address)\n                                    }\n                                    loading={submitting}\n                                >\n                                    {t('i18next.orderpage.continue')}\n                                </Button>\n                            )}\n                        />\n                        <Link className={style.back} to={URLs.basket.url}>\n                            {t('i18next.orderpage.back')}\n                        </Link>\n                    </form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default OrderPage;\n"],"sourceRoot":""}