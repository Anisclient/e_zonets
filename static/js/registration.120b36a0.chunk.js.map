{"version":3,"sources":["components/modal-window/modal-window.tsx","components/modal-window/style.module.css","containers/registration/steps/style.module.css","containers/registration/registration.tsx","__data__/actions/registration-confirm-stage.ts","__data__/actions/registration-input-stage.ts","containers/registration/steps/input-stage.tsx","containers/registration/steps/confirm-stage.tsx"],"names":["ModalWindowType","ModalWindow","modalText","buttonText","switchShowPopap","handler","type","t","useTranslation","className","style","modal","onClick","colorScheme","ButtonColors","blue","buttonOffset","forBasket","lightgreen","overlay","module","exports","RegistrationStep","submitCodeForm","setText","handleShowPopap","a","code","baseAxios","method","url","data","response","message","submitRegistrationForm","login","password","email","dispatch","successActionCreator","steps","INPUT_STEP","setStep","loginRef","useRef","useSelector","selectors","inputStage","useDispatch","values","repeatPassword","submit","useEffect","CONFIRM_STEP","setReset","current","focus","onSubmit","validate","errors","test","subscription","submitting","render","handleSubmit","form","formTitle","formText","name","component","LabeledInput","inputRef","label","id","placeholder","disabled","pristine","green","loading","to","URLs","cancelLink","useState","modalWindowActive","changeModalWindowActive","text","isReady","confirmStage","setIsReadyActionCreator","onlyInformationType","Registration","currentStep","setCurrentStep","Stage"],"mappings":"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","file":"static/js/registration.120b36a0.chunk.js","sourcesContent":["import React from 'react';\nimport style from './style.module.css';\nimport Button, { ButtonColors } from '../button';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\nexport enum ModalWindowType {\n    onlyInformationType,\n    forBasket,\n}\n\ninterface ModalWindowProps {\n    modalText: string;\n    buttonText: string;\n    switchShowPopap: () => void;\n    handler: () => void;\n    type: ModalWindowType;\n}\n\nconst ModalWindow: React.FC<ModalWindowProps> = ({\n    modalText,\n    buttonText,\n    switchShowPopap,\n    handler,\n    type,\n}) => {\n    const { t } = useTranslation();\n    function commitHandler() {\n        switchShowPopap();\n        handler();\n    }\n\n    return (\n        <div>\n            <div className={style.modal}>\n                <p className={style.modalText}>{modalText}</p>\n                <Button\n                    onClick={commitHandler}\n                    colorScheme={ButtonColors.blue}\n                    className={style.buttonOffset}\n                >\n                    {buttonText}\n                </Button>\n                {type === ModalWindowType.forBasket && (\n                    <Button\n                        colorScheme={ButtonColors.lightgreen}\n                        className={style.buttonOffset}\n                        onClick={switchShowPopap}\n                    >\n                        {t('i18next.modalwindow.cancel')}\n                    </Button>\n                )}\n            </div>\n            <div className={style.overlay}></div>\n        </div>\n    );\n};\n\nexport default ModalWindow;\n\nModalWindow.propTypes = {\n    modalText: PropTypes.string.isRequired,\n    buttonText: PropTypes.string.isRequired,\n    switchShowPopap: PropTypes.func.isRequired,\n    handler: PropTypes.func.isRequired,\n    type: PropTypes.oneOf([\n        ModalWindowType.onlyInformationType,\n        ModalWindowType.forBasket,\n    ]).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"style_modal__K5xBK\",\"buttonOffset\":\"style_buttonOffset__1106E\",\"overlay\":\"style_overlay__3brN4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"style_form__3O1SZ\",\"formTitle\":\"style_formTitle__3zJ71\",\"buttonOffset\":\"style_buttonOffset__2RQ6Y\",\"formText\":\"style_formText__3j0c4\",\"cancelLink\":\"style_cancelLink__13uzr\"};","import React, { ReactElement, useState } from 'react';\nimport { ConfirmStage } from './steps/confirm-stage';\nimport { InputStage } from './steps/input-stage';\n\n/* eslint-disable no-unused-vars */\nexport interface StageProps {\n    setStep: (step: RegistrationStep) => void;\n}\n\nexport enum RegistrationStep {\n    INPUT_STEP,\n    CONFIRM_STEP,\n}\n\nconst steps = {\n    [RegistrationStep.INPUT_STEP]: InputStage,\n    [RegistrationStep.CONFIRM_STEP]: ConfirmStage,\n};\n\nfunction Registration(): ReactElement {\n    const [currentStep, setCurrentStep] = useState(RegistrationStep.INPUT_STEP);\n    const Stage: React.FC<StageProps> = steps[currentStep];\n\n    return <Stage setStep={setCurrentStep} />;\n}\n\nexport default Registration;\n","// import * as types from '../action-types';\n// import { getConfigValue } from '@ijl/cli';\nimport { baseAxios } from '../../utils';\n\n// const submitActionCreator = () => ({ type: types.REGISTRATION.CONFIRM.SUBMIT });\n// export const successActionCreator = () => ({\n//     type: types.REGISTRATION.CONFIRM.SUCCESS,\n// });\n// export const errorActionCreator = (payload: string | boolean) => ({\n//     type: types.REGISTRATION.CONFIRM.FAILURE,\n//     payload,\n// });\n\n// export const setIsReadyActionCreator = (payload: boolean) => ({\n//     type: types.REGISTRATION.CONFIRM.SET_ISREADY,\n//     payload,\n// });\n\n// export const formCodeChange = (payload: string) => ({\n//     type: types.REGISTRATION.CONFIRM.FORM_CODE_CHANGE,\n//     payload,\n// });\n\nexport const submitCodeForm = async ({ code }, setText, handleShowPopap, t) => {\n    // dispatch(submitActionCreator());\n    // const baseApiUrl = getConfigValue('e_zone.api');\n    // const response = await fetch(baseApiUrl + '/register/confirm', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json;charset=utf-8',\n    //     },\n    //     body: JSON.stringify({ code }),\n    // });\n\n    // if (response.ok) {\n    //     try {\n    //         const result = await response.json();\n    //         // window.localStorage.setItem(result.login, result.token);\n    //         setText(t('i18next.registration.confirm.success'));\n    //         handleShowPopap();\n    //     } catch (error) {\n    //         console.error(error.message);\n    //         // dispatch(errorActionCreator(error.message));\n    //         return { code: error.message };\n    //     }\n    // } else {\n    //     try {\n    //         const result = await response.json();\n    //         const error =\n    //             (result.code === 2 &&\n    //                 t('i18next.registration.confirm.errorcode2')) ||\n    //             t('i18next.registration.confirm.unknownerror');\n    //         // dispatch(errorActionCreator(error));\n    //         return { code: error };\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n\n    try {\n        const response = await baseAxios({\n            method: 'POST',\n            url: '/register/confirm',\n            data: {\n                code,\n            },\n        });\n        if (response?.data?.message) {\n            setText(t('i18next.registration.confirm.success'));\n            handleShowPopap();\n        }\n    } catch (error) {\n        // dispatch(errorActionCreator(error));\n        return {\n            code:\n                (error?.response?.data?.code === 2 &&\n                    t('i18next.registration.confirm.errorcode2')) ||\n                t('i18next.registration.confirm.unknownerror'),\n        };\n    }\n};\n","// import * as types from '../action-types';\n// import { getConfigValue } from '@ijl/cli';\nimport { baseAxios } from '../../utils';\nimport { handleSuccess as successActionCreator } from '../store/slices/registration/inpus-stage';\n// const submitActionCreator = () => ({ type: types.REGISTRATION.INPUT.SUBMIT });\n// const successActionCreator = (payload) => ({\n//     type: types.REGISTRATION.INPUT.SUCCESS,\n//     payload,\n// });\n// const errorActionCreator = (payload) => ({\n//     type: types.REGISTRATION.INPUT.FAILURE,\n//     payload,\n// });\n\n// export const setCommonError = (error: string | boolean) => ({\n//     type: types.REGISTRATION.INPUT.SET_COMMON_ERROR,\n//     error,\n// });\n\n// export const setSamePasswordError = (error: string | boolean) => ({\n//     type: types.REGISTRATION.INPUT.SET_SAME_PASSWORD_ERROR,\n//     error,\n// });\n\n// export const formLoginChange = (payload: string) => ({\n//     type: types.REGISTRATION.INPUT.FORM_LOGIN_CHANGE,\n//     payload,\n// });\n\n// export const formEmailChange = (value: string) => ({\n//     type: types.REGISTRATION.INPUT.FORM_EMAIL_CHANGE,\n//     value,\n// });\n\n// export const formPasswordChange = (value: string) => ({\n//     type: types.REGISTRATION.INPUT.FORM_PASSWORD_CHANGE,\n//     value,\n// });\n// export const formRepeatPasswordChange = (value: string) => ({\n//     type: types.REGISTRATION.INPUT.FORM_REPEAT_PASSWORD_CHANGE,\n//     value,\n// });\n\n// export const setReset = () => ({\n//     type: types.REGISTRATION.INPUT.SET_RESET_DATA,\n// });\n\nexport const submitRegistrationForm = ({ login, password, email }, t) => async (\n    dispatch\n) => {\n    // dispatch(submitActionCreator());\n    // const baseApiUrl = getConfigValue('e_zone.api');\n    // const response = await fetch(baseApiUrl + '/register', {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json;charset=utf-8',\n    //     },\n    //     body: JSON.stringify({\n    //         login,\n    //         password,\n    //         email,\n    //     }),\n    // });\n\n    // if (response.ok) {\n    //     try {\n    //         const answer = await response.json();\n    //         dispatch(successActionCreator(answer.message));\n    //     } catch (error) {\n    //         console.error(error.message);\n    //         // dispatch(errorActionCreator(error.message));\n    //         return { login: error.message };\n    //     }\n    // } else {\n    //     try {\n    //         const result = await response.json();\n\n    //         // const error = result.error ;\n    //         // dispatch(errorActionCreator(error));\n    //         return {\n    //             email:\n    //                 result.code === 3 &&\n    //                 t('i18next.registration.input.errorcode3'),\n    //         };\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n    try {\n        const response = await baseAxios({\n            method: 'POST',\n            url: '/register',\n            data: {\n                login,\n                password,\n                email,\n            },\n        });\n        dispatch(successActionCreator(response.data.message));\n    } catch (error) {\n        return {\n            email:\n                error?.response?.data?.code === 3 &&\n                t('i18next.registration.input.errorcode3'),\n        };\n    }\n};\n","import { LabeledInput, Button, ButtonColors } from '../../../components';\nimport React, { useEffect, useRef } from 'react';\nimport style from './style.module.css';\nimport { RegistrationStep, StageProps } from '../registration';\nimport { Link } from 'react-router-dom';\nimport { URLs } from '../../../__data__/urls';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n    // formLoginChange,\n    // formEmailChange,\n    // formPasswordChange,\n    // formRepeatPasswordChange,\n    submitRegistrationForm as submit,\n    // setCommonError,\n    // setSamePasswordError,\n    // setReset,\n} from '../../../__data__/actions/registration-input-stage';\nimport { handleResetData as setReset } from '../../../__data__/store/slices/registration/inpus-stage';\nimport * as selectors from '../../../__data__/selectors';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\ninterface Values {\n    login: string;\n    password: string;\n    repeatPassword: string;\n    email: string;\n}\n\nexport const InputStage: React.FC<StageProps> = ({ setStep }) => {\n    const { t } = useTranslation();\n    const loginRef = useRef<HTMLInputElement>();\n    // const loading = useSelector(selectors.registration.inputStage.loading);\n    const data = useSelector(selectors.registration.inputStage.data);\n    // const error = useSelector(selectors.registration.inputStage.error);\n    // const login = useSelector(selectors.registration.inputStage.login);\n    // const email = useSelector(selectors.registration.inputStage.email);\n    // const password = useSelector(selectors.registration.inputStage.password);\n    // const repeatPassword = useSelector(\n    //     selectors.registration.inputStage.repeatPassword\n    // );\n    // const commonError = useSelector(\n    //     selectors.registration.inputStage.commonError\n    // );\n    // const samePasswordsError = useSelector(\n    //     selectors.registration.inputStage.samePasswordsError\n    // );\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (data) {\n            setStep(RegistrationStep.CONFIRM_STEP);\n            dispatch(setReset());\n        }\n    }, [data]);\n\n    useEffect(() => {\n        loginRef.current && loginRef.current.focus();\n    }, [loginRef.current]);\n\n    async function handleSubmit(\n        // event: React.FormEvent<HTMLFormElement>\n        values: Values\n    ) {\n        // event.preventDefault();\n\n        const { login, password, repeatPassword, email } = values;\n\n        if (login && password && repeatPassword && email) {\n            if (password === repeatPassword) {\n                return dispatch(submit({ login, password, email }, t));\n            }\n            // else {\n            // dispatch(setSamePasswordError('Пароли не совпадают'));\n            // }\n        }\n        // else {\n        // dispatch(setCommonError('Заполните все поля'));\n        // }\n    }\n\n    // function handleLoginChange(event) {\n    //     dispatch(formLoginChange(event.target.value));\n    // }\n\n    // function handleEmailChange(event) {\n    //     dispatch(formEmailChange(event.target.value));\n    // }\n\n    // function handlePasswordChange(event) {\n    //     dispatch(formPasswordChange(event.target.value));\n    // }\n\n    // function handleRepeatPasswordChange(event) {\n    //     dispatch(formRepeatPasswordChange(event.target.value));\n    // }\n\n    function validateForm(values) {\n        interface Errors {\n            login?: string;\n            email?: string;\n            password?: string;\n            repeatPassword?: string;\n        }\n        const errors: Errors = {};\n        if (!values.login) {\n            errors.login = t('i18next.registration.input.errorfillall');\n        }\n        if (!values.password) {\n            errors.password = t('i18next.registration.input.errorfillall');\n        }\n        if (!values.email) {\n            errors.email = t('i18next.registration.input.errorfillall');\n        }\n        if (!values.repeatPassword) {\n            errors.repeatPassword = t(\n                'i18next.registration.input.errorfillall'\n            );\n        } else if (values.password !== values.repeatPassword) {\n            errors.repeatPassword = t(\n                'i18next.registration.input.errormismatchedpasswords'\n            );\n        }\n        if (\n            values.email &&\n            // !/^[\\w.]{2,64}@[a-z]{2,16}\\.[a-z]{2,3}$/i.test(values.email)\n            !/^[\\w.]{2,64}@[\\w.]{2,16}\\.[a-z]{2,3}$/i.test(values.email)\n        ) {\n            errors.email = t('i18next.registration.input.errorvalidemail');\n        }\n        if (values.password && !/[!?\\-&_*]/.test(values.password)) {\n            errors.password = `${t(\n                'i18next.registration.input.erroratleastoneof'\n            )} !,?,-,&,_,*`;\n        }\n        if (values.password && /(.)\\1{2}/.test(values.password)) {\n            errors.password = t(\n                'i18next.registration.input.erroridenticalsymbols'\n            );\n        }\n\n        return errors;\n    }\n\n    return (\n        <Form\n            onSubmit={handleSubmit}\n            validate={validateForm}\n            subscription={{ submitting: true }}\n            render={({ handleSubmit }) => (\n                <form className={style.form} onSubmit={handleSubmit}>\n                    <h3 className={style.formTitle}>\n                        {t('i18next.registration.input.title')}\n                    </h3>\n                    <p className={style.formText}>\n                        {t('i18next.registration.input.informtext')}\n                    </p>\n                    <FormSpy\n                        subscription={{ submitting: true }}\n                        render={({ submitting }) => (\n                            <Field\n                                name=\"login\"\n                                component={LabeledInput}\n                                inputRef={loginRef}\n                                label={t('i18next.registration.input.login')}\n                                id=\"login\"\n                                placeholder={t(\n                                    'i18next.registration.input.enterlogin'\n                                )}\n                                disabled={submitting}\n                            />\n                        )}\n                    />\n\n                    <FormSpy\n                        subscription={{ submitting: true }}\n                        render={({ submitting }) => (\n                            <Field\n                                name=\"password\"\n                                component={LabeledInput}\n                                label={t('i18next.registration.input.password')}\n                                id=\"password\"\n                                placeholder={t(\n                                    'i18next.registration.input.enterpassword'\n                                )}\n                                type=\"password\"\n                                disabled={submitting}\n                            />\n                        )}\n                    />\n\n                    <FormSpy\n                        subscription={{ submitting: true }}\n                        render={({ submitting }) => (\n                            <Field\n                                name=\"repeatPassword\"\n                                component={LabeledInput}\n                                label={`${t(\n                                    'i18next.registration.input.repeatpassword'\n                                )}:`}\n                                id=\"repeat-password\"\n                                placeholder={t(\n                                    'i18next.registration.input.repeatpassword'\n                                )}\n                                type=\"password\"\n                                disabled={submitting}\n                            />\n                        )}\n                    />\n\n                    <FormSpy\n                        subscription={{ submitting: true }}\n                        render={({ submitting }) => (\n                            <Field\n                                name=\"email\"\n                                component={LabeledInput}\n                                label=\"Email:\"\n                                id=\"email\"\n                                placeholder={t(\n                                    'i18next.registration.input.enteremail'\n                                )}\n                                disabled={submitting}\n                            />\n                        )}\n                    />\n\n                    <FormSpy\n                        subscription={{\n                            submitting: true,\n                            errors: true,\n                            pristine: true,\n                        }}\n                        render={({ submitting, errors, pristine }) => (\n                            <Button\n                                colorScheme={ButtonColors.green}\n                                className={style.buttonOffset}\n                                type=\"submit\"\n                                disabled={\n                                    pristine ||\n                                    errors.login ||\n                                    errors.password ||\n                                    errors.repeatPassword ||\n                                    errors.email ||\n                                    submitting\n                                }\n                                loading={submitting}\n                            >\n                                {t('i18next.registration.input.continue')}\n                            </Button>\n                        )}\n                    />\n                    <Link to={URLs.login.url} className={style.cancelLink}>\n                        {t('i18next.registration.input.cancel')}\n                    </Link>\n                </form>\n            )}\n        />\n        // <form className={style.form} onSubmit={handleSubmit}>\n        //     <h3 className={style.formTitle}>Регистрация</h3>\n        //     <p className={style.formText}>\n        //         Заполните поля (существ. email для проверки - a@mail.com,\n        //         b@mail.com)\n        //     </p>\n        //     <LabeledInput\n        //         disabled={loading}\n        //         inputRef={loginRef}\n        //         label=\"Логин:\"\n        //         id=\"login\"\n        //         name=\"login\"\n        //         placeholder=\"Введите логин\"\n        //         value={login}\n        //         onChange={handleLoginChange}\n        //         error={commonError}\n        //     />\n        //     <LabeledInput\n        //         disabled={loading}\n        //         label=\"Пароль:\"\n        //         id=\"password\"\n        //         name=\"password\"\n        //         placeholder=\"Введите пароль\"\n        //         value={password}\n        //         onChange={handlePasswordChange}\n        //         error={!!commonError || samePasswordsError}\n        //         type=\"password\"\n        //     />\n        //     <LabeledInput\n        //         disabled={loading}\n        //         label=\"Повторите пароль:\"\n        //         id=\"repeat-password\"\n        //         name=\"repeat-password\"\n        //         placeholder=\"Повторите пароль\"\n        //         value={repeatPassword}\n        //         onChange={handleRepeatPasswordChange}\n        //         error={!!commonError || !!samePasswordsError}\n        //         type=\"password\"\n        //     />\n        //     <LabeledInput\n        //         disabled={loading}\n        //         label=\"Email:\"\n        //         id=\"email\"\n        //         name=\"email\"\n        //         placeholder=\"Введите email\"\n        //         value={email}\n        //         onChange={handleEmailChange}\n        //         error={!!commonError || error}\n        //     />\n        //     <Button\n        //         disabled={loading}\n        //         loading={loading}\n        //         colorScheme={ButtonColors.green}\n        //         className={style.buttonOffset}\n        //         type=\"submit\"\n        //     >\n        //         Продолжить\n        //     </Button>\n        //     <Link to={URLs.login.url} className={style.cancelLink}>\n        //         Отменить\n        //     </Link>\n        // </form>\n    );\n};\n\nInputStage.propTypes = {\n    setStep: PropTypes.func.isRequired,\n};\n","import { LabeledInput, Button, ButtonColors } from '../../../components';\nimport React, { useEffect, useRef, useState } from 'react';\nimport style from './style.module.css';\nimport { Link, Redirect } from 'react-router-dom';\nimport { URLs } from '../../../__data__/urls';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    // formCodeChange,\n    submitCodeForm as submit,\n    // errorActionCreator,\n    // successActionCreator,\n    // setIsReadyActionCreator,\n} from '../../../__data__/actions/registration-confirm-stage';\nimport {\n    handleSuccess as successActionCreator,\n    handleIsReady as setIsReadyActionCreator,\n} from '../../../__data__/store/slices/registration/confirm-stage';\nimport * as selectors from '../../../__data__/selectors';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport ModalWindow, { ModalWindowType } from '../../../components/modal-window';\nimport { useTranslation } from 'react-i18next';\n/* eslint-disable no-unused-vars */\n\ninterface Values {\n    code: number;\n}\n\nexport const ConfirmStage: React.FC = () => {\n    const loginRef = useRef<HTMLInputElement>();\n    const { t } = useTranslation();\n\n    const [modalWindowActive, changeModalWindowActive] = useState(false);\n    const [text, setText] = useState('');\n\n    // const code = useSelector(selectors.registration.confirmStage.code);\n    // const error = useSelector(selectors.registration.confirmStage.error);\n    const isReady = useSelector(selectors.registration.confirmStage.isReady);\n    // const loading = useSelector(selectors.registration.confirmStage.loading);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        loginRef.current && loginRef.current.focus();\n    }, [loginRef.current]);\n\n    async function handleSubmit(\n        // event: React.FormEvent<HTMLFormElement>\n        values: Values\n    ) {\n        // event.preventDefault();\n        const { code } = values;\n\n        if (code) {\n            return submit({ code }, setText, handleShowPopap, t);\n        } else {\n            // dispatch(errorActionCreator('Укажите проверочный код'));\n        }\n    }\n    // function handleChange(event) {\n    //     dispatch(formCodeChange(event.target.value));\n    // }\n\n    useEffect(() => {\n        return function () {\n            dispatch(setIsReadyActionCreator(false));\n        };\n    }, []);\n\n    if (isReady) {\n        return <Redirect to={URLs.login.url} />;\n    }\n\n    function handleShowPopap() {\n        changeModalWindowActive(!modalWindowActive);\n    }\n\n    function finishRegistration() {\n        handleShowPopap();\n        dispatch(successActionCreator());\n    }\n\n    function validateForm(values) {\n        interface Errors {\n            code?: string;\n        }\n        const errors: Errors = {};\n        if (!values.code) {\n            errors.code = t(\n                'i18next.registration.confirm.errorecodeisrequired'\n            );\n        }\n        return errors;\n    }\n\n    return (\n        <>\n            {modalWindowActive && (\n                <ModalWindow\n                    buttonText=\"Ok\"\n                    modalText={text}\n                    switchShowPopap={handleShowPopap}\n                    handler={finishRegistration}\n                    type={ModalWindowType.onlyInformationType}\n                />\n            )}\n            <Form\n                onSubmit={handleSubmit}\n                validate={validateForm}\n                subscription={{ submitting: true }}\n                render={({ handleSubmit }) => (\n                    <form className={style.form} onSubmit={handleSubmit}>\n                        <h3 className={style.formTitle}>\n                            {t('i18next.registration.confirm.title')}\n                        </h3>\n                        <p className={style.formText}>\n                            {t('i18next.registration.confirm.informtext')}\n                        </p>\n                        <FormSpy\n                            subscription={{ submitting: true }}\n                            render={({ submitting }) => (\n                                <Field\n                                    name=\"code\"\n                                    component={LabeledInput}\n                                    inputRef={loginRef}\n                                    label={t(\n                                        'i18next.registration.confirm.code'\n                                    )}\n                                    id=\"code-input\"\n                                    placeholder={t(\n                                        'i18next.registration.confirm.entercode'\n                                    )}\n                                    type=\"number\"\n                                    disabled={submitting}\n                                />\n                            )}\n                        />\n                        <FormSpy\n                            subscription={{\n                                submitting: true,\n                                errors: true,\n                                pristine: true,\n                            }}\n                            render={({ submitting, errors, pristine }) => (\n                                <Button\n                                    colorScheme={ButtonColors.green}\n                                    className={style.buttonOffset}\n                                    type=\"submit\"\n                                    disabled={\n                                        pristine || errors.code || submitting\n                                    }\n                                    loading={submitting}\n                                >\n                                    {t('i18next.registration.confirm.continue')}\n                                </Button>\n                            )}\n                        />\n                        <Link to={URLs.login.url} className={style.cancelLink}>\n                            {t('i18next.registration.confirm.cancel')}\n                        </Link>\n                    </form>\n                )}\n            />\n        </>\n        // <form className={style.form} onSubmit={handleSubmit}>\n        //     <h3 className={style.formTitle}>Завершение регистрации</h3>\n        //     <p className={style.formText}>Введите код (правильный код - 123)</p>\n        //     <LabeledInput\n        //         inputRef={loginRef}\n        //         label=\"Код:\"\n        //         id=\"code-input\"\n        //         name=\"code\"\n        //         placeholder=\"Введите код\"\n        //         value={code}\n        //         onChange={handleChange}\n        //         type=\"number\"\n        //         error={error}\n        //         disabled={loading}\n        //     />\n        //     <Button\n        //         disabled={loading}\n        //         loading={loading}\n        //         colorScheme={ButtonColors.green}\n        //         className={style.buttonOffset}\n        //         type=\"submit\"\n        //     >\n        //         Продолжить\n        //     </Button>\n        //     <Link to={URLs.login.url} className={style.cancelLink}>\n        //         Отменить\n        //     </Link>\n        // </form>\n    );\n};\n"],"sourceRoot":""}